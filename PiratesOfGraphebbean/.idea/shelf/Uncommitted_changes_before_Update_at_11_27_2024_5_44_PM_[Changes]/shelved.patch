Index: src/main/java/Cliente/MainGameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Cliente;\r\n\r\nimport Cliente.Grafo.MapaDelMar;\r\nimport Modelos.CasesEnThreadServidor;\r\nimport Modelos.Random;\r\nimport Modelos.Utilities;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Line;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\n\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\n\r\n\r\n//import javax.mail.Store; TODO DESCOMENTAR ESTO\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\npublic class MainGameController {\r\n    private Stage stage;\r\n    private Scene scene;\r\n    private Parent root;\r\n\r\n    private String userName;\r\n    private Cliente cliente;\r\n    private MapaDelMar mapaDelMar;\r\n    private boolean comodinListo;\r\n\r\n    private StoreController storeActual;\r\n\r\n    static final HashMap<String, List<Integer>> hashPosItems = new HashMap<String, List<Integer>>();\r\n\r\n    static final HashMap<List<Integer>, List<List<Integer>>> hashAllCoords = new HashMap<List<Integer>, List<List<Integer>>>();\r\n\r\n    @FXML private Label lblComodinTimer;\r\n\r\n    @FXML private Button btnEscudo;\r\n\r\n    @FXML private Button btnKraken;\r\n\r\n    @FXML private Label lblMinaTimer;\r\n\r\n    @FXML private AnchorPane anchorPane;\r\n\r\n    @FXML private Button btnSend;\r\n\r\n    @FXML private GridPane PantallaJugador;\r\n\r\n    @FXML private GridPane PantallaEnemigo;\r\n\r\n    @FXML private TextArea txaChat;\r\n\r\n    @FXML private TextField txfMensaje;\r\n\r\n    @FXML private TextArea txaAcciones;\r\n\r\n    @FXML private ComboBox<String> itemComboBox;\r\n\r\n    @FXML private ComboBox<String> conectorComboBox;\r\n\r\n    @FXML private ComboBox<String> placeItemComboBox;\r\n\r\n    @FXML private Spinner<Integer> coordX;\r\n\r\n    @FXML private Spinner<Integer> coordY;\r\n\r\n    @FXML private ComboBox<String> cbxVerEnemy;\r\n\r\n    @FXML private TextField coordX1;\r\n\r\n    @FXML private TextField coordY1;\r\n\r\n    @FXML private Spinner<Integer> sbxC_X;      @FXML private Spinner<Integer> sbxC_Y;\r\n\r\n    @FXML private Spinner<Integer> sbxCM_X;      @FXML private Spinner<Integer> sbxCM_Y;\r\n\r\n    @FXML private Spinner<Integer> sbxBomb1_X;      @FXML private Spinner<Integer> sbxBomb1_Y;\r\n    @FXML private Spinner<Integer> sbxBomb2_X;      @FXML private Spinner<Integer> sbxBomb2_Y;\r\n    @FXML private Spinner<Integer> sbxBomb3_X;      @FXML private Spinner<Integer> sbxBomb3_Y;\r\n\r\n    @FXML private Spinner<Integer> sbxCBR1_X;   @FXML private Spinner<Integer> sbxCBR1_Y;\r\n    @FXML private Spinner<Integer> sbxCBR2_X;   @FXML private Spinner<Integer> sbxCBR2_Y;\r\n    @FXML private Spinner<Integer> sbxCBR3_X;   @FXML private Spinner<Integer> sbxCBR3_Y;\r\n    @FXML private Spinner<Integer> sbxCBR4_X;   @FXML private Spinner<Integer> sbxCBR4_Y;\r\n    @FXML private Spinner<Integer> sbxCBR5_X;   @FXML private Spinner<Integer> sbxCBR5_Y;\r\n    @FXML private Spinner<Integer> sbxCBR6_X;   @FXML private Spinner<Integer> sbxCBR6_Y;\r\n    @FXML private Spinner<Integer> sbxCBR7_X;   @FXML private Spinner<Integer> sbxCBR7_Y;\r\n    @FXML private Spinner<Integer> sbxCBR8_X;   @FXML private Spinner<Integer> sbxCBR8_Y;\r\n    @FXML private Spinner<Integer> sbxCBR9_X;   @FXML private Spinner<Integer> sbxCBR9_Y;\r\n    @FXML private Spinner<Integer> sbxCBR10_X;  @FXML private Spinner<Integer> sbxCBR10_Y;\r\n\r\n\r\n\r\n    private List<int[][]> coordenadas = new ArrayList<>();\r\n    private List<List<Integer>> coordenadasConector = new ArrayList<>();\r\n    //private List<String> itemsInScreen = new ArrayList<>();\r\n    private Spinner<Integer>[] spinnersC;\r\n    private Spinner<Integer>[] spinnersCM;\r\n    private Spinner<Integer>[][] spinnersBomb;\r\n    private Spinner<Integer>[][] spinnersCBR;\r\n\r\n\r\n    private static int getNumberFromString(String item) {\r\n        System.out.println(item);\r\n        int number = switch (item) {\r\n            case \"Energia\" -> 1;\r\n            case \"Mina\" -> 2;\r\n            case \"Templo\" -> 3;\r\n            case \"Tienda\" -> 4;\r\n            case \"Conector\" -> 5;\r\n            default -> {\r\n                System.out.println(\"√çtem no reconocido: \" + item);\r\n                yield -1;\r\n            }\r\n        };\r\n        return number;\r\n    }\r\n\r\n    public static void colocarEnHash(String text, List<Integer> pos){\r\n        hashPosItems.put(text, pos);\r\n    }\r\n\r\n    public static void colocarTodasCoordsHash(int x, int y, int val){\r\n        List<Integer> key = new ArrayList<>();\r\n        key.add(x);\r\n        key.add(y);\r\n        // Ahora aqui es en donde yo voy a comenzar a usar el hash para guardar las coordenadas;\r\n        List<List<Integer>> allKeys = new ArrayList<>();\r\n        // Ahora si aqui vienen los casos\r\n        // FALTA PONER LOS CASOS QUE AUN NO ESTAN\r\n        if(val == 1){\r\n            List<Integer> firstCoord = new ArrayList<>();\r\n            List<Integer> secondCoord = new ArrayList<>();\r\n            List<Integer> thirdCoord = new ArrayList<>();\r\n            List<Integer> fourthCoord = new ArrayList<>();\r\n            firstCoord.add(x);\r\n            firstCoord.add(y);\r\n\r\n            secondCoord.add(x + 1);\r\n            secondCoord.add(y);\r\n\r\n            thirdCoord.add(x);\r\n            thirdCoord.add(y + 1);\r\n\r\n            fourthCoord.add(x + 1);\r\n            fourthCoord.add(y + 1);\r\n\r\n            allKeys.add(firstCoord);\r\n            allKeys.add(secondCoord);\r\n            allKeys.add(thirdCoord);\r\n            allKeys.add(fourthCoord);\r\n            hashAllCoords.put(key, allKeys);\r\n        } else if (val == 2 || val == 4){\r\n            List<Integer> firstCoord = new ArrayList<>();\r\n            List<Integer> secondCoord = new ArrayList<>();\r\n\r\n            firstCoord.add(x);\r\n            firstCoord.add(y);\r\n\r\n            secondCoord.add(x + 1);\r\n            secondCoord.add(y);\r\n\r\n            allKeys.add(firstCoord);\r\n            allKeys.add(secondCoord);\r\n            hashAllCoords.put(key, allKeys);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static List<List<Integer>> obtenerCoordsPorLlave(int x, int y) {\r\n        List<Integer> key = new ArrayList<>();\r\n        key.add(x);\r\n        key.add(y);\r\n        if (hashAllCoords.containsKey(key)) {\r\n            return hashAllCoords.get(key);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void loadAccordion(List<String> items) {\r\n        for(int i = 0; i < items.size(); i++) {\r\n            itemComboBox.getItems().add(items.get(i));\r\n        }\r\n        items.clear();\r\n    }\r\n\r\n    private void loadDataComboBox() {\r\n        itemComboBox.getItems().clear();\r\n        for(int i = 0; i < cliente.getListaItems().size(); i++) {\r\n            itemComboBox.getItems().add(cliente.getListaItems().get(i));\r\n        }\r\n    }\r\n\r\n    public void setUserData(Cliente _cliente){\r\n        // Como esto se corre cuando se inicializa la aplicacion, aqui vamos a poner los items principales de la pantalla\r\n        this.userName = _cliente.getNombreCliente();\r\n        this.cliente = _cliente;\r\n        agruparSpinnersAtaque();\r\n        loadDataComboBox();\r\n        loadEnemigosCbx();\r\n        setSpinners();\r\n        mapaDelMar = new MapaDelMar(PantallaJugador, 20);\r\n        mapaDelMar.inicializarGrid();\r\n        new Thread(() -> cronoMina()).start();\r\n        new Thread(() -> cronoComodin()).start();\r\n    }\r\n\r\n    private void loadEnemigosCbx(){\r\n        for (String oponente : cliente.getNombresOponentes()) {\r\n            cbxVerEnemy.getItems().add(oponente);\r\n        }\r\n    }\r\n\r\n    private void setSpinners(){\r\n        //sbxPrecioComponente.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(100, 3000, 100, 100));\r\n        coordX.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 1, 1));\r\n        coordY.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 1, 1));\r\n        for (Spinner<Integer> spinner : spinnersC) {\r\n            spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 0, 1));\r\n        }\r\n\r\n        for (Spinner<Integer> spinner : spinnersCM) {\r\n            spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 0, 1));\r\n        }\r\n\r\n        for (Spinner<Integer>[] row : spinnersBomb) {\r\n            for (Spinner<Integer> spinner : row) {\r\n                spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 18, 0, 1));\r\n            }\r\n        }\r\n\r\n        for (Spinner<Integer>[] row : spinnersCBR) {\r\n            for (Spinner<Integer> spinner : row) {\r\n                spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 0, 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    private void agruparSpinnersAtaque(){\r\n        spinnersC = new Spinner[] { sbxC_X, sbxC_Y };\r\n        spinnersCM = new Spinner[] { sbxCM_X, sbxCM_Y };\r\n\r\n        spinnersBomb = new Spinner[][] {\r\n                { sbxBomb1_X, sbxBomb1_Y },\r\n                { sbxBomb2_X, sbxBomb2_Y },\r\n                { sbxBomb3_X, sbxBomb3_Y }\r\n        };\r\n\r\n        spinnersCBR = new Spinner[][] {\r\n                { sbxCBR1_X, sbxCBR1_Y },\r\n                { sbxCBR2_X, sbxCBR2_Y },\r\n                { sbxCBR3_X, sbxCBR3_Y },\r\n                { sbxCBR4_X, sbxCBR4_Y },\r\n                { sbxCBR5_X, sbxCBR5_Y },\r\n                { sbxCBR6_X, sbxCBR6_Y },\r\n                { sbxCBR7_X, sbxCBR7_Y },\r\n                { sbxCBR8_X, sbxCBR8_Y },\r\n                { sbxCBR9_X, sbxCBR9_Y },\r\n                { sbxCBR10_X, sbxCBR10_Y }\r\n        };\r\n    }\r\n\r\n    private void dibujarLinea(AnchorPane anchorPane, double x1, double y1, double x2, double y2) {\r\n        Line line = new Line(x1, y1, x2, y2);\r\n        line.setStrokeWidth(2);\r\n        line.setStroke(javafx.scene.paint.Color.BLUE);\r\n        anchorPane.getChildren().add(line);\r\n    }\r\n\r\n    private void drawLine(AnchorPane anchorPane, int x1, int y1, int x2, int y2) {\r\n        int StartX = 252 + x1*24;\r\n        int StartY = 100 + y1*24;\r\n        int EndX = 252 + x2*24;\r\n        int EndY = 100 + y2*24;\r\n        Line line = new Line(StartX, StartY, EndX, EndY);\r\n        line.setStrokeWidth(2);\r\n        line.setStroke(javafx.scene.paint.Color.BLUE);\r\n        anchorPane.getChildren().add(line);\r\n    }\r\n\r\n\r\n    private void placeImage(AnchorPane anchorPane, int x, int y, String imagePath) {\r\n        // Calcula las coordenadas basadas en el formato de referencia\r\n        int posX = 252 + x * 24;\r\n        int posY = 100 + y * 24;\r\n\r\n        // Carga la imagen desde la ruta proporcionada\r\n        System.out.println(String.valueOf(getClass().getResource(imagePath)));\r\n        Image image = new Image(String.valueOf(getClass().getResource(imagePath)));\r\n\r\n        // Crea un ImageView para mostrar la imagen\r\n        ImageView imageView = new ImageView(image);\r\n\r\n        // Ajusta las dimensiones del ImageView (opcional, seg√∫n tus necesidades)\r\n        imageView.setFitWidth(24); // Por ejemplo, el tama√±o de un cuadro\r\n        imageView.setFitHeight(24);\r\n\r\n        // Posiciona el ImageView en el AnchorPane\r\n        imageView.setLayoutX(posX);\r\n        imageView.setLayoutY(posY);\r\n\r\n        // A√±ade el ImageView al AnchorPane\r\n        anchorPane.getChildren().add(imageView);\r\n    }\r\n\r\n\r\n    public void recibeGrafoEnemigo(String grafo) {\r\n        // Dibujar en pantalla\r\n        System.out.println(grafo);\r\n        String[] partes = grafo.split(\"t=&\");\r\n        // Tengo el grafo ahora tengo que procesarlo\r\n        List<List<Integer>> listaAdyacencia = new ArrayList<>();\r\n        int[][] matrizTipos;\r\n        int[][] matrizTiposCopia;\r\n        boolean[][] matrizDestruccion;\r\n\r\n\r\n        System.out.println(partes[0]);\r\n        System.out.println(partes[1]);\r\n        System.out.println(partes[2]);\r\n\r\n        listaAdyacencia = mapaDelMar.deserializeListaAdyacencia(partes[0]);\r\n        matrizTipos = mapaDelMar.deserializeMatrix(partes[1]);\r\n        matrizTiposCopia =  mapaDelMar.deserializeMatrix(partes[1]);\r\n        matrizDestruccion = mapaDelMar.deserializeBooleanMatrix(partes[2]);\r\n\r\n        System.out.println(listaAdyacencia);\r\n        //System.out.println(matrizTipos.toString());\r\n        System.out.println(Arrays.deepToString(matrizTipos));\r\n        System.out.println(Arrays.deepToString(matrizDestruccion));\r\n\r\n        /**\r\n        for(int i = 0; i < listaAdyacencia.size(); i++) {\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(1)][listaAdyacencia.get(i).get(0)]);\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(3)][listaAdyacencia.get(i).get(2)]);\r\n        }\r\n\r\n        for(int i = 0; i < listaAdyacencia.size(); i++) {\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(0)][listaAdyacencia.get(i).get(1)]);\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(2)][listaAdyacencia.get(i).get(3)]);\r\n        }\r\n         */\r\n        List<List<Integer>> conexionesFuente = new ArrayList<>();\r\n        conexionesFuente = mapaDelMar.obtenerConexFuente(listaAdyacencia, matrizDestruccion, matrizTipos);\r\n        System.out.println(\"ADY\" + listaAdyacencia);\r\n        System.out.println(conexionesFuente);\r\n        for(int i = 0; i < conexionesFuente.size(); i++) {\r\n            System.out.println(conexionesFuente.get(i));\r\n\r\n            if(matrizTipos[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] == 2\r\n            || matrizTipos[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] == 3 ||\r\n                    matrizTipos[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] == 4\r\n            ){\r\n                matrizTiposCopia[conexionesFuente.get(i).get(1) + 1][conexionesFuente.get(i).get(0)] = 0;\r\n            }\r\n            matrizTiposCopia[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] = 0;\r\n        }\r\n        mapaDelMar.inicializarGridEnemgio(matrizTiposCopia,  PantallaEnemigo);\r\n        // Lo que no esta conectado a la fuente tengo que mostrarlo :)\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnVerEnemyClick() {\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        try {\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.CONSEGUIRGRAFOENEMIGO);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n        } catch (Exception e) {System.out.println(\"Error consiguiendo grafo enemigo\");}\r\n    }\r\n\r\n    public void testLineDraw() {\r\n        String selectedConnector = conectorComboBox.getValue();\r\n        String selectedItem = placeItemComboBox.getValue();\r\n        if (selectedConnector != null) {\r\n            String[] coordinates = selectedConnector.split(\",\");\r\n            try {\r\n                int x = Integer.parseInt(coordinates[0].trim());\r\n                int y = Integer.parseInt(coordinates[1].trim());\r\n                System.out.println(\"X: \" + x + \", Y: \" + y);\r\n                // conectorComboBox.getItems().remove(selectedConnector);\r\n                // Ahora hay que pasarle las del item :)\r\n                System.out.println(selectedItem);\r\n                List<Integer> listaCoordenadasItem  = hashPosItems.get(selectedItem);\r\n                drawLine(anchorPane, x, y, listaCoordenadasItem.get(0), listaCoordenadasItem.get(1));\r\n                mapaDelMar.conectarIslas(x, y, listaCoordenadasItem.get(0), listaCoordenadasItem.get(1)); // Por ahora solo conecto el item papa\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Error: formato inv√°lido en selectedConnector.\");\r\n            } catch (ArrayIndexOutOfBoundsException e) {\r\n                System.out.println(\"Error: selectedConnector no tiene el formato esperado.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"No hay conector seleccionado.\");\r\n        }\r\n    }\r\n\r\n\r\n    public void backFromStore(Cliente _cliente, MapaDelMar _mapaDelMar){\r\n        this.cliente = _cliente;\r\n        loadDataComboBox();\r\n        this.mapaDelMar = _mapaDelMar;\r\n        for(int i = 0; i < mapaDelMar.getMatrizTipos().length; i++){\r\n            System.out.println(Arrays.toString(mapaDelMar.getMatrizTipos()[i]));\r\n        }\r\n        mapaDelMar.inicializarGrid();\r\n        mapaDelMar.recrearGrid(PantallaJugador);\r\n    }\r\n\r\n    public void updateGUIDespuesDeOfertaOCompra(){\r\n        if(storeActual != null){\r\n            Platform.runLater(() -> storeActual.actualizarComponentesCbx());\r\n            Platform.runLater(() -> storeActual.actualizarDinero());\r\n            Platform.runLater(() -> storeActual.actualizarAcero());\r\n        } else {\r\n            Platform.runLater(() ->loadDataComboBox());\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnSendClick(){\r\n        String mensaje = cliente.getNombreCliente() + \": \" + txfMensaje.getText();\r\n        cliente.mandarMensaje(mensaje);\r\n        txfMensaje.clear();\r\n    }\r\n\r\n    @FXML protected void btnGoStore() {\r\n        if(!mapaDelMar.getItemsInScreen().contains(\"Tienda\")){return;}\r\n\r\n        Platform.runLater(() -> {\r\n            try {\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Cliente/StoreScreen.fxml\"));\r\n                Parent root = loader.load();\r\n                StoreController controller = loader.getController();\r\n                storeActual = controller;\r\n                controller.setGameController(cliente, mapaDelMar);\r\n                Stage popupStage = new Stage();\r\n                popupStage.setTitle(\"Store\");\r\n                popupStage.initModality(Modality.WINDOW_MODAL);\r\n                popupStage.initOwner(MainCliente.getPrimaryStage());\r\n                Scene scene = new Scene(root);\r\n                popupStage.setScene(scene);\r\n\r\n                popupStage.setOnHidden(event -> {\r\n                    System.out.println(\"El pop-up ha sido cerrado.\");\r\n                    itemComboBox.getItems().clear();\r\n                    loadDataComboBox();\r\n                    storeActual = null;\r\n                });\r\n                popupStage.show();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @FXML\r\n    protected void btnProcessData(ActionEvent event){\r\n        String selectedItem = itemComboBox.getValue();\r\n        int selectedInt = getNumberFromString(selectedItem);\r\n        /**\r\n        int coordXInt = Integer.parseInt(coordX.getText());\r\n        int coordYInt = Integer.parseInt(coordY.getText());\r\n         */\r\n        int coordXInt = coordX.getValue();\r\n        int coordYInt = coordY.getValue();\r\n        // PROCESA\r\n        // 1. Tengo que ver si lo puedo colocar donde se quiere:\r\n        // Este verificador debe de tomar todos los bloques del evento en cuenta\r\n        if(mapaDelMar.estaDisponibleItem(coordXInt, coordYInt, selectedInt)) {\r\n\r\n            mapaDelMar.asignarTipoIsla(coordYInt, coordXInt, selectedInt); // En este item se agrega la logica para cubrir todos los bloques\r\n            // TENGO QUE VER COMO LLEVO UN REGISTRO DE ESTO\r\n            mapaDelMar.inicializarGrid();\r\n            itemComboBox.getItems().remove(selectedItem);\r\n            cliente.getListaItems().remove(selectedItem);\r\n            // Yo deberia de tomar esto, y guardarlo en algo que me permita saber que item esta en que coordenada?\r\n\r\n            if (Objects.equals(selectedItem, \"Conector\")) {\r\n                List<Integer> coordenadasConect = new ArrayList<>();\r\n                coordenadasConect.add(coordXInt);\r\n                coordenadasConect.add(coordYInt);\r\n                String itemComboBox = coordX.getValue().toString() + \",\" + coordY.getValue().toString();\r\n                coordenadasConector.add(coordenadasConect);\r\n                conectorComboBox.getItems().add(itemComboBox);\r\n                // Ahora, debo de registrar en el grafo que existe una liga\r\n            } else {\r\n                mapaDelMar.getItemsInScreen().add(selectedItem);\r\n                // El item es algo que puede ser conectado\r\n                // Hay que hacer el hash que guarda la informacion de conexcion\r\n                placeItemComboBox.getItems().add(selectedItem);\r\n                List<Integer> coordItem = new ArrayList<>();\r\n                coordItem.add(coordXInt);\r\n                coordItem.add(coordYInt);\r\n                colocarEnHash(selectedItem, coordItem);\r\n                // Voy a hacer otro hash que sea, coordInciialx, coordinicialy, (todo el resto de coordenadas)\r\n                colocarTodasCoordsHash(coordXInt, coordYInt, selectedInt); // Ya aqui deberian de estar todas las coordenadas de cada item\r\n                // Ahora tengo que asignar todos los cuadros en mapaDelMar\r\n                placeImage(anchorPane, coordXInt, coordYInt, \"/Images/Conector.jpg\");\r\n            }\r\n        } else {\r\n            // Debe de haber un laben en pantalla en donde le muestro el error\r\n            System.out.println(\"Hay algun bloque ocupado.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * La funcion de ataque devuelva un enum\r\n     * ¬øQue casos?\r\n     * -> Que ataco a una fuente de energia (Me la da) (En cualquier casilla)\r\n     * -> Que ataque a un remolino (Se debe de ejecutar la funcion que envia ataques)\r\n     * -> No le di a nada (Tengo que dejar marcado que el me disparo ahi)\r\n     * -> Si le di a algo (No puede estar dentro de lo especificado) (Se debe de tramitar bien el item como eliminado en el grafo)\r\n     * -> y eso\r\n     */\r\n\r\n    private void cronoMina(){\r\n        while(true){\r\n            int[] sec = {0};\r\n            int[] min = {1};\r\n            while(sec[0] != 0 || min[0] != 0){\r\n                sec[0]--;\r\n                if(sec[0]<0){\r\n                    min[0]--;\r\n                    sec[0] = 59;\r\n                }\r\n                Platform.runLater(() -> lblMinaTimer.setText(Utilities.formatearEnTimer(min[0]) + \":\" + Utilities.formatearEnTimer(sec[0])));\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            }\r\n            generarAcero();\r\n        }\r\n    }\r\n\r\n    private void generarAcero(){\r\n        int minas = Collections.frequency(mapaDelMar.getItemsInScreen(),\"Mina\");\r\n        cliente.subirAcero(minas*100);\r\n    }\r\n\r\n    private void cronoComodin(){\r\n        while(true){\r\n            int[] sec = {0};\r\n            int[] min = {5};\r\n            Platform.runLater(()-> lblComodinTimer.setText(\"N/A\"));\r\n            while(!mapaDelMar.getItemsInScreen().contains(\"Templo\")){\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            } //si no tiene templo, entonces a esperar\r\n\r\n            while(!comodinListo){\r\n                if(!mapaDelMar.getItemsInScreen().contains(\"Templo\")){break;}\r\n                sec[0]--;\r\n                if(sec[0]==0 && min[0] ==0){\r\n                    comodinListo = true;\r\n                    Platform.runLater(()-> lblComodinTimer.setText(\"Comod√≠n Listo\"));\r\n                    comodinListo();\r\n                    continue;\r\n                } else if(sec[0]<0 && min[0] > 0){\r\n                    min[0]--;\r\n                    sec[0] = 59;\r\n                }\r\n                Platform.runLater(()-> lblComodinTimer.setText(Utilities.formatearEnTimer(min[0]) + \":\" + Utilities.formatearEnTimer(sec[0])));\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            }\r\n            while(comodinListo){\r\n                if(!mapaDelMar.getItemsInScreen().contains(\"Templo\")){\r\n                    btnEscudo.setDisable(true);\r\n                    btnKraken.setDisable(true);\r\n                    break;\r\n                }\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void comodinListo(){\r\n        if(Random.randomBoolean()){\r\n            btnEscudo.setDisable(false);\r\n        } else {\r\n            btnKraken.setDisable(false);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnEscudoClick(){\r\n        btnEscudo.setDisable(false);\r\n        //TODO\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnKrakenClick(){\r\n        btnKraken.setDisable(false);\r\n        //TODO\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnCClick(){\r\n        //TODO: revisar turno, y que no he perdido, ESTO PARA LOS 4 ATAQUES\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getCanon() <= 0){return;}\r\n        cliente.usarCanon();\r\n\r\n        try {\r\n            int[] coords = new int[2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                coords[i] = spinnersC[i].getValue();\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARCANON);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con ca√±on\");}\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnCMClick(){\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getCanonMult() <= 0){return;}\r\n        cliente.usarCanonMult();\r\n\r\n        try {\r\n            int[] coords = new int[2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                coords[i] = spinnersCM[i].getValue();\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARCANONMULT);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con ca√±on m√∫ltiple\");}\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnBombClick(){\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getBomba() <= 0){return;}\r\n        cliente.usarBomba();\r\n\r\n        try {\r\n            int[][] coords = new int[3][2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                for (int j = 0; j < 2; j++) {\r\n                    coords[i][j] = spinnersBomb[i][j].getValue();\r\n                }\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARBOMBA);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con bomba\");}\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnCBRClick(){\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getCanonBR() <= 0){return;}\r\n        cliente.usarCanonBR();\r\n\r\n        try {\r\n            int[][] coords = new int[10][2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                for (int j = 0; j < 2; j++) {\r\n                    coords[i][j] = spinnersCBR[i][j].getValue();\r\n                }\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARCBR);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con Ca√±√≥n de Barba Roja\");}\r\n    }\r\n\r\n\r\n    public TextArea getTxaChat() {\r\n        return txaChat;\r\n    }\r\n\r\n    public TextArea getTxaAcciones(){\r\n        return txaAcciones;\r\n    }\r\n\r\n    public MapaDelMar getMapaDelMar() {\r\n        return mapaDelMar;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Cliente/MainGameController.java b/src/main/java/Cliente/MainGameController.java
--- a/src/main/java/Cliente/MainGameController.java	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/src/main/java/Cliente/MainGameController.java	(date 1732750960450)
@@ -207,7 +207,7 @@
         items.clear();
     }
 
-    private void loadDataComboBox() {
+    public void loadDataComboBox() {
         itemComboBox.getItems().clear();
         for(int i = 0; i < cliente.getListaItems().size(); i++) {
             itemComboBox.getItems().add(cliente.getListaItems().get(i));
Index: src/main/java/Cliente/Cliente.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Cliente;\r\n\r\nimport Modelos.CasesEnCliente;\r\nimport Modelos.CasesEnThreadServidor;\r\nimport Modelos.TiposAtaque;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.ButtonType;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic class Cliente {\r\n    private ClienteScreenController pantallaCliente;\r\n    private MainGameController pantallaMain;\r\n    private DataInputStream entradaDatos;\r\n    private DataOutputStream salidaDatos;\r\n    private ObjectInputStream entradaObjetos;\r\n    private ObjectOutputStream salidaObjetos;\r\n    private Socket socket; //Socket del cliente.\r\n    private String nombreCliente;\r\n    private boolean canStart = false;\r\n    private ArrayList<String> nombresOponentes;\r\n    // Aqui voy a tener una lista de items que van a estar en pantalla\r\n    private List<String> listaItems = new ArrayList<String>();\r\n    private int acero;\r\n    private int dinero;\r\n    private int canon;\r\n    private int canonMult;\r\n    private int bomba;\r\n    private int canonBR;\r\n\r\n\r\n\r\n    public Cliente(ClienteScreenController pantallaCliente) {\r\n        this.pantallaCliente = pantallaCliente;\r\n        dinero = 1000000;\r\n        acero = 1000000; //tesitng values\r\n        canon = 0;\r\n        canonMult = 0;\r\n        bomba = 0;\r\n        canonBR = 0;\r\n    }\r\n\r\n    public List<String> getListaItems() {\r\n        return listaItems;\r\n    }\r\n\r\n    public void run() {\r\n        listaItems.add(\"Tienda\");\r\n        listaItems.add(\"Energia\");\r\n        try {\r\n            conectar();\r\n        } catch (Exception ex) {System.out.println(\"Error conectando al servidor\");}\r\n\r\n        try {\r\n            esperarStart();\r\n        } catch (Exception ex) {System.out.println(\"Error esperando a start\");}\r\n        System.out.println(\"ya todos presionaron listo\");\r\n\r\n        try{\r\n            conseguirNombresOponentes();\r\n        } catch (Exception ex) {System.out.println(\"Error consiguiendo nombre de oponentes\");}\r\n\r\n        new Thread(() -> {\r\n            juegoEmpieza();\r\n        }).start();\r\n    }\r\n\r\n    public void conectar() throws Exception {\r\n        socket = new Socket(\"localhost\", 50000);\r\n        entradaDatos = new DataInputStream(socket.getInputStream());\r\n        salidaDatos = new DataOutputStream(socket.getOutputStream());\r\n        salidaObjetos = new ObjectOutputStream(socket.getOutputStream());\r\n        entradaObjetos = new ObjectInputStream(socket.getInputStream());\r\n    }\r\n\r\n    public boolean mandarNombreAServer(String nombre) {\r\n        if(nombre.trim().equals(\"\")){\r\n            return false;\r\n        }\r\n        try {\r\n            this.nombreCliente = nombre;\r\n            salidaDatos.writeUTF(nombre);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error mandando el nombre\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void mandarIniciarAServer() {\r\n        try {\r\n            salidaDatos.writeBoolean(true);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error mandando que se presion√≥ el bot√≥n iniciar\");\r\n        }\r\n    }\r\n\r\n    // Algunas cosas que tienen que llegar del cliente van a venir por aqui:\r\n    private void esperarStart() {\r\n            try {\r\n                String mensaje = entradaDatos.readUTF();\r\n                System.out.println(mensaje);\r\n                if (mensaje.equals(\"START\")) {\r\n\r\n                    // aqui tengo que decirle a la aplicacion que tiene que moverse al siguiente stage\r\n                    canStart = true;\r\n                    System.out.println(\"test pantalla\");\r\n                    pantallaCliente.moveMain();\r\n                }\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Error recibiendo mensaje del servidor\");\r\n                ex.printStackTrace();\r\n            }\r\n    }\r\n\r\n    private void conseguirNombresOponentes() throws Exception {\r\n        salidaObjetos.writeObject(CasesEnThreadServidor.DEVOLVERNOMBRESOPONENTES);\r\n        nombresOponentes = (ArrayList<String>)entradaObjetos.readObject();\r\n    }\r\n\r\n    private void juegoEmpieza() {\r\n        CasesEnCliente evento = CasesEnCliente.NADA;\r\n        while (true) {\r\n            try {\r\n                evento = (CasesEnCliente) entradaObjetos.readObject();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Error con entrada de evento en threadCliente\");\r\n            }\r\n            switch (evento) {\r\n                case RECIBIRMENSAJE:\r\n                    try {\r\n                        recibirMensaje();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirMensaje en Cliente\");}\r\n                case PONERENBITACORA:\r\n                    try {\r\n                        ponerEnBitacora();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ponerEnBitacora en Cliente\");}\r\n                case RECIBIROFERTA:\r\n                    try {\r\n                        recibirOferta();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirOferta en Cliente\");}\r\n                case OFERTAACEPTADA:\r\n                    try {\r\n                        ofertaAceptada();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ofertaAceptada en Cliente\");}\r\n                case DEVOLVERGRAFO:\r\n                    try {\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(pantallaMain.getMapaDelMar().serializar());\r\n                        //TODO, revisar que si sea eso\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso devolverGrafo en Cliente\" + ex);}\r\n                case SETGRAFOENEMIGO:\r\n                    try {\r\n                        setGrafoEnemigo();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso setGrafoEnemigo en Cliente\");}\r\n                case RECIBIROFERTAACERO:\r\n                    try {\r\n                        recibirOfertaAcero();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirOfertaAcero en Cliente\");}\r\n                case OFERTAACEPTADAACERO:\r\n                    try {\r\n                        ofertaAceptadaAcero();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ofertaAceptadaAcero en Cliente\");}\r\n                case SERATACADO:\r\n                    try {\r\n                        serAtacado();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso serAtacado en Cliente\");}\r\n                case CONSEGUIRFUENTE:\r\n                    try {\r\n                        listaItems.add(\"Energia\");\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso serAtacado en Cliente\");}\r\n            }\r\n        }\r\n    }\r\n\r\n    public void mandarMensaje(String mensaje){\r\n        try {\r\n            salidaObjetos.writeObject(CasesEnThreadServidor.MANDARMENSAJE);\r\n            salidaDatos.writeUTF(mensaje);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private void recibirMensaje() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        pantallaMain.getTxaChat().appendText(mensaje + \"\\n\");\r\n    }\r\n\r\n    private void ponerEnBitacora() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        pantallaMain.getTxaAcciones().appendText(mensaje + \"\\n\");\r\n    }\r\n\r\n    private void recibirOferta() throws Exception{\r\n        String jugadorProponiendo = entradaDatos.readUTF();\r\n        String itemPropuesto = entradaDatos.readUTF();\r\n        int precio = entradaDatos.readInt();\r\n        System.out.println(\"llega aqui\");\r\n\r\n//        ButtonType yesButton = new ButtonType(\"S√≠\");\r\n//        ButtonType noButton = new ButtonType(\"No\");\r\n//        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, jugadorProponiendo + \" te propone \" + itemPropuesto + \" por el precio de \" + precio + \". Aceptas?\", yesButton, noButton);\r\n//        alert.setTitle(\"Confirmaci√≥n\");\r\n//        alert.getButtonTypes().setAll(yesButton, noButton);\r\n//        Optional<ButtonType> result = alert.showAndWait();\r\n//\r\n//        if (result.isPresent() && result.get() == yesButton) {\r\n//            System.out.println(\"lo quiso\");\r\n//            if(tengoDineroSuficiente(precio)){\r\n//                salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n//                salidaObjetos.writeObject(true);\r\n//                bajarDinero(precio);\r\n//                listaItems.add(itemPropuesto);\r\n//                System.out.println(nombreCliente + \" \" +  dinero);\r\n//            } else{\r\n//                salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n//                salidaObjetos.writeObject(false);\r\n//            }\r\n//        } else {\r\n//            System.out.println(\"no lo quiso\");\r\n//            salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n//            salidaObjetos.writeObject(false);\r\n//        }\r\n\r\n\r\n\r\n        Platform.runLater(() -> {\r\n            try {\r\n                ButtonType yesButton = new ButtonType(\"S√≠\");\r\n                ButtonType noButton = new ButtonType(\"No\");\r\n\r\n                Alert alert = new Alert(Alert.AlertType.CONFIRMATION, jugadorProponiendo + \" te propone \" + itemPropuesto + \" por el precio de \" + precio + \". ¬øAceptas?\", yesButton, noButton);\r\n                alert.setTitle(\"Confirmaci√≥n\");\r\n\r\n                Optional<ButtonType> result = alert.showAndWait();\r\n\r\n                if (result.isPresent() && result.get() == yesButton) {\r\n                    System.out.println(\"lo quiso\");\r\n                    if(tengoDineroSuficiente(precio)){\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(true);\r\n                        bajarDinero(precio);\r\n                        listaItems.add(itemPropuesto);\r\n                        System.out.println(nombreCliente + \" \" +  dinero);\r\n                        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n                    } else{\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(false);\r\n                    }\r\n                } else {\r\n                    System.out.println(\"no lo quiso\");\r\n                    salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                    salidaObjetos.writeObject(false);\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void ofertaAceptada() throws Exception{\r\n        String item = entradaDatos.readUTF();\r\n        listaItems.remove(item);\r\n        subirDinero(entradaDatos.readInt());\r\n        System.out.println(nombreCliente + \" \" +  dinero);\r\n        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n    }\r\n\r\n    private void setGrafoEnemigo() throws Exception{\r\n        String grafoEnemigo = entradaDatos.readUTF();\r\n        Platform.runLater(() -> pantallaMain.recibeGrafoEnemigo(grafoEnemigo));\r\n    }\r\n\r\n    private void recibirOfertaAcero() throws Exception{\r\n        String jugadorProponiendo = entradaDatos.readUTF();\r\n        int cantidadPropuesta = entradaDatos.readInt();\r\n        int precio = entradaDatos.readInt();\r\n\r\n        Platform.runLater(() -> {\r\n            try {\r\n                ButtonType yesButton = new ButtonType(\"S√≠\");\r\n                ButtonType noButton = new ButtonType(\"No\");\r\n\r\n                Alert alert = new Alert(Alert.AlertType.CONFIRMATION, jugadorProponiendo + \" te propone \" + cantidadPropuesta + \" de acero por el precio de \" + precio + \". ¬øAceptas?\", yesButton, noButton);\r\n                alert.setTitle(\"Confirmaci√≥n\");\r\n\r\n                Optional<ButtonType> result = alert.showAndWait();\r\n\r\n                if (result.isPresent() && result.get() == yesButton) {\r\n                    System.out.println(\"lo quiso\");\r\n                    if(tengoDineroSuficiente(precio)){\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(true);\r\n                        bajarDinero(precio);\r\n                        subirAcero(cantidadPropuesta);\r\n                        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n                    } else{\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(false);\r\n                    }\r\n                } else {\r\n                    System.out.println(\"no lo quiso\");\r\n                    salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                    salidaObjetos.writeObject(false);\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void ofertaAceptadaAcero() throws Exception{\r\n        int cant = entradaDatos.readInt();\r\n        bajarAcero(cant);\r\n        subirDinero(entradaDatos.readInt());\r\n        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n    }\r\n\r\n    private void serAtacado() throws Exception{\r\n        int[] coords = (int[])entradaObjetos.readObject();\r\n        // Estas son las coordenadas en las que me atacan\r\n        // Aqui es donde tengo que hacer cositas lindas\r\n        TiposAtaque tipoAtaqueRetornar = pantallaMain.getMapaDelMar().atacarIsla(coords[0],coords[1]); // Aqui es en donde llego yo y le mando el ataque a mi compa\r\n        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n        salidaObjetos.writeObject(tipoAtaqueRetornar);\r\n    }\r\n\r\n    public boolean tengoDineroSuficiente(int precio){\r\n        return dinero - precio >= 0; //si la resta da m√°s o igual que 0, puede comprar.\r\n    }\r\n\r\n    public void bajarDinero(int precio){\r\n        dinero -= precio;\r\n    }\r\n\r\n    public void subirDinero(int precio){\r\n        dinero += precio;\r\n    }\r\n\r\n    public boolean tengoAceroSuficiente(int cantidad){\r\n        return acero - cantidad >= 0; //si la resta da m√°s o igual que 0, puede comprar.\r\n    }\r\n\r\n    public void bajarAcero(int cantidad){\r\n        acero -= cantidad;\r\n    }\r\n\r\n    public void subirAcero(int cantidad){\r\n        acero += cantidad;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public String getNombreCliente() {\r\n        return nombreCliente;\r\n    }\r\n\r\n    public boolean getCanStart() {\r\n        return canStart;\r\n    }\r\n\r\n    public void setGameController(MainGameController pantallaMain) {\r\n        this.pantallaMain = pantallaMain;\r\n    }\r\n\r\n    public ArrayList<String> getNombresOponentes() {\r\n        return nombresOponentes;\r\n    }\r\n\r\n    public int getDinero() {\r\n        return dinero;\r\n    }\r\n\r\n    public DataInputStream getEntradaDatos() {\r\n        return entradaDatos;\r\n    }\r\n\r\n    public DataOutputStream getSalidaDatos() {\r\n        return salidaDatos;\r\n    }\r\n\r\n    public ObjectInputStream getEntradaObjetos() {\r\n        return entradaObjetos;\r\n    }\r\n\r\n    public ObjectOutputStream getSalidaObjetos() {\r\n        return salidaObjetos;\r\n    }\r\n\r\n    public int getAcero() {\r\n        return acero;\r\n    }\r\n\r\n    public void comprarCanon(){\r\n        canon++;\r\n    }\r\n\r\n    public void usarCanon(){\r\n        canon--;\r\n    }\r\n\r\n    public void comprarCanonMult() {\r\n        canonMult++;\r\n    }\r\n\r\n    public void usarCanonMult() {\r\n        canonMult--;\r\n    }\r\n\r\n    public void comprarBomba() {\r\n        bomba++;\r\n    }\r\n\r\n    public void usarBomba() {\r\n        bomba--;\r\n    }\r\n\r\n    public void comprarCanonBR() {\r\n        canonBR++;\r\n    }\r\n\r\n    public void usarCanonBR() {\r\n        canonBR--;\r\n    }\r\n\r\n    public int getCanon(){\r\n        return canon;\r\n    }\r\n\r\n    public int getCanonMult() {\r\n        return canonMult;\r\n    }\r\n\r\n    public int getBomba() {\r\n        return bomba;\r\n    }\r\n\r\n    public int getCanonBR() {\r\n        return canonBR;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Cliente/Cliente.java b/src/main/java/Cliente/Cliente.java
--- a/src/main/java/Cliente/Cliente.java	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/src/main/java/Cliente/Cliente.java	(date 1732751015196)
@@ -340,9 +340,7 @@
 
     private void serAtacado() throws Exception{
         int[] coords = (int[])entradaObjetos.readObject();
-        // Estas son las coordenadas en las que me atacan
-        // Aqui es donde tengo que hacer cositas lindas
-        TiposAtaque tipoAtaqueRetornar = pantallaMain.getMapaDelMar().atacarIsla(coords[0],coords[1]); // Aqui es en donde llego yo y le mando el ataque a mi compa
+        TiposAtaque tipoAtaqueRetornar = pantallaMain.getMapaDelMar().atacarIsla(coords[0],coords[1]);
         salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);
         salidaObjetos.writeObject(tipoAtaqueRetornar);
     }
Index: src/main/java/Server/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport java.io.IOException;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\n\r\npublic class Server {\r\n    private ServerScreenController pantallaServidor;\r\n    ServerConnectionsThread connectionsThread;\r\n    private ServerSocket servidor;\r\n    private ArrayList<Socket> clientes; //Sockets para cada usuario / cliente\r\n    private ArrayList<ThreadServidor> threadsServidor;\r\n    private int conectados;\r\n\r\n    private static Server singleton;\r\n\r\n    private Server(ServerScreenController pantallaServidor){\r\n        this.pantallaServidor = pantallaServidor;\r\n        this.clientes = new ArrayList<Socket>();\r\n        this.threadsServidor= new ArrayList<ThreadServidor>();\r\n        this.conectados = 0;\r\n    }\r\n\r\n    public static Server getInstance(ServerScreenController pantallaServidor) {\r\n        if (singleton == null) {\r\n            singleton = new Server(pantallaServidor);\r\n        }\r\n\r\n        return singleton;\r\n    }\r\n\r\n    public void run(){\r\n        try {\r\n            servidor = new ServerSocket(50000);\r\n        } catch (IOException ex) {System.out.println(\"Error levantando el servidor \\n\");}\r\n\r\n        pantallaServidor.write(\"Servidor levantado \\n\");\r\n        pantallaServidor.write(\"Esperando usuarios \\n\");\r\n        connectionsThread = new ServerConnectionsThread(this);\r\n        connectionsThread.start();\r\n        esperarConexiones(); //Se queda aqu√≠ hasta tener la cantidad necesaria de jugadores conectados y que pongan start o hagan toda la vara.\r\n\r\n        //Cuando ya pasa aqu√≠, es que ya todos presionaron start, entonces ya puede comenzar el juego\r\n        ponerContrincantes();\r\n\r\n    }\r\n\r\n    private void esperarConexiones(){ //esperar que todos inicien.\r\n        while(conectados < 2){\r\n            try {Thread.sleep(500);} catch (InterruptedException ex) {}\r\n        } //esperar a que al menos hayan 2 conectados\r\n\r\n        while(true) { //esperar que todos los conectados presionen start\r\n            try {Thread.sleep(500);} catch (InterruptedException ex) {}\r\n            boolean algunoNoHaPresionado = false;\r\n            for (ThreadServidor threadServidor : threadsServidor) {\r\n                if (!threadServidor.isStartPresionado()) {\r\n                    algunoNoHaPresionado = true;\r\n                }\r\n            }\r\n            if (!algunoNoHaPresionado) {\r\n                connectionsThread.apagar();\r\n                // Aqui es donde debo de jugar (Abrir la ventana inicial de gaming)\r\n                comenzarPartida(\"START\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void writeInConsole(String texto){\r\n        pantallaServidor.write(texto);\r\n    }\r\n\r\n    public ServerSocket getServidor() {\r\n        return servidor;\r\n    }\r\n\r\n    public void anadirAThreadsServidor(ThreadServidor ts) {\r\n        threadsServidor.add(ts);\r\n    }\r\n\r\n    public int getConectados() {\r\n        return conectados;\r\n    }\r\n\r\n    public void conectarPersona(){\r\n        conectados +=1;\r\n    }\r\n\r\n    public void comenzarPartida(String mensaje) {\r\n        for (ThreadServidor threadServidor : threadsServidor) {\r\n            threadServidor.mensajeComenzar(mensaje);\r\n        }\r\n    }\r\n\r\n    private void ponerContrincantes(){\r\n        for (ThreadServidor cliente : threadsServidor) {\r\n            for (ThreadServidor enemigo : threadsServidor) {\r\n                if(cliente != enemigo){\r\n                    cliente.getContrincantes().add(enemigo);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Server/Server.java b/src/main/java/Server/Server.java
--- a/src/main/java/Server/Server.java	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/src/main/java/Server/Server.java	(date 1732750960452)
@@ -11,7 +11,9 @@
     private ServerSocket servidor;
     private ArrayList<Socket> clientes; //Sockets para cada usuario / cliente
     private ArrayList<ThreadServidor> threadsServidor;
+    private ArrayList<Boolean> jugadoresPerdieron;
     private int conectados;
+    private int turnoActual;
 
     private static Server singleton;
 
@@ -20,6 +22,8 @@
         this.clientes = new ArrayList<Socket>();
         this.threadsServidor= new ArrayList<ThreadServidor>();
         this.conectados = 0;
+        this.turnoActual = 1;
+        this.jugadoresPerdieron = new ArrayList<Boolean>();
     }
 
     public static Server getInstance(ServerScreenController pantallaServidor) {
@@ -101,7 +105,41 @@
                     cliente.getContrincantes().add(enemigo);
                 }
             }
+            jugadoresPerdieron.add(false);
         }
     }
+
+    public void siguienteTurno(){
+        do{
+            if(turnoActual == threadsServidor.size()){
+                turnoActual = 1;
+            } else {
+                turnoActual++;
+            }
+        }while(jugadoresPerdieron.get(turnoActual-1));
+        System.out.println("ES EL TURNO DE " + turnoActual);
+    }
+
+    public boolean seRendioId(int id){
+        if(jugadoresPerdieron.get(id-1)){
+            return false; //indicando que ya se hab√≠a rendido o perdi√≥ antes
+        }
+        jugadoresPerdieron.set(id-1, true);
+        return true;
+    }
+
+    public boolean revisarGane(){
+        boolean gano = !jugadoresPerdieron.get(turnoActual-1); //es true si a√∫n sigue vivo
+
+        for (int i = 1; i <= jugadoresPerdieron.size(); i++) {
+            if(i != turnoActual){
+                gano = gano && jugadoresPerdieron.get(i-1);
+            }
+        }
+        return gano;
+    }
 
+    public int getTurnoActual() {
+        return turnoActual;
+    }
 }
Index: src/main/java/Cliente/ClienteScreenController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Cliente;\r\n\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class ClienteScreenController {\r\n    private Stage stage;\r\n    private Scene scene;\r\n    private Parent root;\r\n\r\n    @FXML\r\n    private TextField txfNombre;\r\n\r\n    @FXML\r\n    private Button btnNombre;\r\n\r\n    private Cliente cliente;\r\n\r\n    @FXML\r\n    public void initialize(){ //es como el constructor por decir asi/\\\r\n        cliente = new Cliente(this);\r\n        new Thread(() -> {\r\n            cliente.run();\r\n        }).start();\r\n    }\r\n\r\n\r\n    @FXML\r\n    protected void onBtnNombreClick(ActionEvent event){\r\n        //validaciones de nombre, si no es nombre que sirve, entonces return\r\n        if(cliente.mandarNombreAServer(txfNombre.getText())){\r\n            btnNombre.setDisable(true);\r\n            txfNombre.setDisable(true);\r\n            cliente.mandarIniciarAServer();\r\n        }\r\n\r\n    }\r\n\r\n    public void moveMain() throws IOException {\r\n            System.out.println(\"Todas las partidas inician\");\r\n            Platform.runLater(() -> { //para asegurar que corra en el thread de JavaFX application, sino se cae.\r\n                try {\r\n                    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Cliente/MainWindow.fxml\"));\r\n                    Parent root = loader.load();\r\n                    MainGameController controller = loader.getController();\r\n                    controller.setUserData(cliente);\r\n                    cliente.setGameController(controller);\r\n                    stage = MainCliente.getPrimaryStage();\r\n                    scene = new Scene(root);\r\n                    stage.setTitle(cliente.getNombreCliente());\r\n                    stage.setScene(scene);\r\n                    stage.show();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Cliente/ClienteScreenController.java b/src/main/java/Cliente/ClienteScreenController.java
--- a/src/main/java/Cliente/ClienteScreenController.java	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/src/main/java/Cliente/ClienteScreenController.java	(date 1732750960449)
@@ -59,7 +59,7 @@
                     cliente.setGameController(controller);
                     stage = MainCliente.getPrimaryStage();
                     scene = new Scene(root);
-                    stage.setTitle(cliente.getNombreCliente());
+                    stage.setTitle( "[" + cliente.getIdCliente() + "] " + cliente.getNombreCliente());
                     stage.setScene(scene);
                     stage.show();
                 } catch (IOException e) {
Index: src/main/java/Server/ThreadServidor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport Modelos.CasesEnCliente;\r\nimport Modelos.CasesEnThreadServidor;\r\nimport Modelos.Random;\r\nimport Modelos.TiposAtaque;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\n\r\npublic class ThreadServidor extends Thread{\r\n    public Socket socket;\r\n    private Server servidor;\r\n    private DataInputStream entradaDatos;\r\n    private DataOutputStream salidaDatos;\r\n    private ObjectInputStream entradaObjetos;\r\n    private ObjectOutputStream salidaObjetos;\r\n    private String nombreCliente;\r\n    private int numeroCliente; //numConexion\r\n    private boolean startPresionado;\r\n    private ArrayList<ThreadServidor> contrincantes;\r\n    private Object objeto;\r\n\r\n    ThreadServidor(Socket socket, Server servidor, int numeroCliente){\r\n        this.socket = socket;\r\n        this.servidor = servidor;\r\n        this.numeroCliente = numeroCliente;\r\n        this.nombreCliente = \"\";\r\n        this.startPresionado = false;\r\n        try {\r\n            entradaDatos = new DataInputStream(socket.getInputStream());\r\n            salidaDatos = new DataOutputStream(socket.getOutputStream());\r\n            salidaObjetos = new ObjectOutputStream(socket.getOutputStream());\r\n            entradaObjetos = new ObjectInputStream(socket.getInputStream());\r\n        } catch (IOException ex) { System.out.println(\"Error en entrada/salida de datos\");}\r\n        this.contrincantes = new ArrayList<ThreadServidor>();\r\n    }\r\n\r\n    public void run(){\r\n        recibirNombreCliente();\r\n        recibirSiYaInicio();\r\n        juegoEmpieza();\r\n    }\r\n\r\n    private void recibirNombreCliente(){\r\n        try {\r\n            nombreCliente = entradaDatos.readUTF();\r\n            servidor.writeInConsole(\"El jugador \" + numeroCliente + \" se llama \"+ nombreCliente + \"\\n\"); //Lo muestra en el servidor.\r\n        } catch (IOException ex) {System.out.println(\"Error leyendo el nombre del cliente\");}\r\n    }\r\n\r\n    private void recibirSiYaInicio(){\r\n        try {\r\n            startPresionado = entradaDatos.readBoolean();\r\n            servidor.writeInConsole(nombreCliente + \" ya est√° listo\" + \"\\n\"); //Lo muestra en el servidor.\r\n        } catch (IOException ex) {System.out.println(\"Error leyendo si ya presiono el bot√≥n\");}\r\n    }\r\n\r\n    public void mensajeComenzar(String mensaje) {\r\n        try {\r\n            salidaDatos.writeUTF(mensaje);\r\n            salidaDatos.flush(); // Asegura que el mensaje se env√≠e de inmediato\r\n        } catch (IOException ex) {\r\n            System.out.println(\"Error enviando mensaje al cliente \" + nombreCliente);\r\n        }\r\n    }\r\n\r\n    private void juegoEmpieza(){\r\n        CasesEnThreadServidor evento = CasesEnThreadServidor.NADA;\r\n        while(true){\r\n            try {\r\n                evento = (CasesEnThreadServidor) entradaObjetos.readObject();\r\n            } catch (Exception ex) {System.out.println(\"Error con entrada de evento en ThreadServidor\");}\r\n            switch(evento){\r\n                case MANDARMENSAJE:\r\n                    try {\r\n                        mandarMensaje();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirMensaje en ThreadServidor\");}\r\n                case MANDARACCION:\r\n                    try {\r\n                        mandarAccion();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirAccion en ThreadServidor\");}\r\n                case DEVOLVERNOMBRESOPONENTES:\r\n                    try {\r\n                        devolverNombresOponentes();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso devolverNombresOponentes en ThreadServidor\");}\r\n                case PROPONERVENTA:\r\n                    try {\r\n                        proponerVenta();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso proponerVenta en ThreadServidor\");}\r\n                case PONERENOBJETO:\r\n                    try {\r\n                        objeto = entradaObjetos.readObject();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso PONERENOBJETO en ThreadServidor\");}\r\n                case CONSEGUIRGRAFOENEMIGO:\r\n                    try {\r\n                        conseguirGrafoEnemigo();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso CONSEGUIRGRAFOENEMIGO en ThreadServidor\");}\r\n                case PROPONERVENTAACERO:\r\n                    try {\r\n                        proponerVentaAcero();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso PROPONERVENTAACERO en ThreadServidor\");}\r\n                case ATACARCANON:\r\n                    try {\r\n                        atacarCanon();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARCANON en ThreadServidor\");}\r\n                case ATACARCANONMULT:\r\n                    try {\r\n                        atacarCanonMult();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARCANONMULT en ThreadServidor\");}\r\n                case ATACARBOMBA:\r\n                    try {\r\n                        atacarBomba();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARBOMBA en ThreadServidor\");}\r\n                case ATACARCBR:\r\n                    try {\r\n                        atacarCanonBR();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARCBR en ThreadServidor\");}\r\n            }\r\n        }\r\n    }\r\n\r\n    private void mandarMensaje() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        salidaObjetos.writeObject(CasesEnCliente.RECIBIRMENSAJE);\r\n        salidaDatos.writeUTF(mensaje);\r\n        for(ThreadServidor contrincante : contrincantes){\r\n            contrincante.salidaObjetos.writeObject((CasesEnCliente.RECIBIRMENSAJE));\r\n            contrincante.salidaDatos.writeUTF(mensaje);\r\n        }\r\n    }\r\n\r\n    private void mandarAccion() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        salidaObjetos.writeObject(CasesEnCliente.RECIBIRACCION);\r\n        salidaDatos.writeUTF(mensaje);\r\n        for(ThreadServidor contrincante : contrincantes){\r\n            contrincante.salidaObjetos.writeObject((CasesEnCliente.RECIBIRACCION));\r\n            contrincante.salidaDatos.writeUTF(mensaje);\r\n        }\r\n    }\r\n\r\n    private void devolverNombresOponentes() throws Exception{\r\n        ArrayList<String> nombres = new ArrayList<String>();\r\n        for(ThreadServidor contrincante : contrincantes){\r\n            nombres.add(contrincante.getNombreCliente());\r\n        }\r\n        salidaObjetos.writeObject(nombres);\r\n    }\r\n\r\n    private void proponerVenta() throws Exception{\r\n        String selectedItem = entradaDatos.readUTF();\r\n        String selectedPlayer = entradaDatos.readUTF();\r\n        int precio = entradaDatos.readInt();\r\n        ThreadServidor ts = getEnemigoConNombre(selectedPlayer);\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.RECIBIROFERTA);\r\n        ts.getSalidaDatos().writeUTF(nombreCliente);\r\n        ts.getSalidaDatos().writeUTF(selectedItem);\r\n        ts.getSalidaDatos().writeInt(precio);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        Boolean acepto = (Boolean)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n\r\n        if(acepto){\r\n            salidaObjetos.writeObject(CasesEnCliente.OFERTAACEPTADA);\r\n            salidaDatos.writeUTF(selectedItem);\r\n            salidaDatos.writeInt(precio);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void conseguirGrafoEnemigo() throws Exception{\r\n        String selectedPlayer = entradaDatos.readUTF();\r\n        ThreadServidor ts = getEnemigoConNombre(selectedPlayer);\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.DEVOLVERGRAFO);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        String grafoEnemigo = (String)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n        salidaObjetos.writeObject(CasesEnCliente.SETGRAFOENEMIGO);\r\n        salidaDatos.writeUTF(grafoEnemigo);\r\n    }\r\n\r\n    private void proponerVentaAcero() throws Exception{\r\n        String selectedPlayer = entradaDatos.readUTF();\r\n        int precio = entradaDatos.readInt();\r\n        int cant = entradaDatos.readInt();\r\n        ThreadServidor ts = getEnemigoConNombre(selectedPlayer);\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.RECIBIROFERTAACERO);\r\n        ts.getSalidaDatos().writeUTF(nombreCliente);\r\n        ts.getSalidaDatos().writeInt(precio);\r\n        ts.getSalidaDatos().writeInt(cant);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        Boolean acepto = (Boolean)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n\r\n        if(acepto){\r\n            salidaObjetos.writeObject(CasesEnCliente.OFERTAACEPTADAACERO);\r\n            salidaDatos.writeInt(cant);\r\n            salidaDatos.writeInt(precio);\r\n        }\r\n    }\r\n\r\n    private void atacarCanon() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[] coords = (int[])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n        salidaDatos.writeUTF(\"Ca√±√≥n: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n        ts.getSalidaDatos().writeUTF(\"Te dispar√≥ un Ca√±√≥n en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n        ts.getSalidaObjetos().writeObject(coords);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        TiposAtaque tipoAtaque = (TiposAtaque)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n        switch(tipoAtaque){\r\n            case FUENTEDEENERGIA:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a.\");\r\n                salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                break;\r\n            case REMOLINO:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                int[][] coordsRemolino = {{Random.randomInt(0,19),Random.randomInt(0,19)}, {Random.randomInt(0,19),Random.randomInt(0,19)},{Random.randomInt(0,19),Random.randomInt(0,19)}};\r\n                for (int[] cds : coordsRemolino) {\r\n                    salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                    salidaObjetos.writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case HIT:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, bien hecho!\");\r\n                break;\r\n            case MISS:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void atacarCanonMult() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[] coords = (int[])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n        salidaDatos.writeUTF(\"Ca√±√≥n Multiple: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n        ts.getSalidaDatos().writeUTF(\"Te dispar√≥ un Ca√±√≥n multiple en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n        ts.getSalidaObjetos().writeObject(coords);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        TiposAtaque tipoAtaque = (TiposAtaque)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n        switch(tipoAtaque){\r\n            case FUENTEDEENERGIA:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a. Adem√°s, por el tipo de ataque, se disparar√°n 4 tiros m√°s al azar.\");\r\n                salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El ataque de ca√±√≥n multiple enemigo acert√≥, disparar√° 4 tiros m√°s\");\r\n                for (int i = 0; i < 4; i++) {\r\n                    int[] cds = {Random.randomInt(0,19),Random.randomInt(0,19)};\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n                    ts.getSalidaObjetos().writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case REMOLINO:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                int[][] coordsRemolino = {{Random.randomInt(0,19),Random.randomInt(0,19)}, {Random.randomInt(0,19),Random.randomInt(0,19)},{Random.randomInt(0,19),Random.randomInt(0,19)}};\r\n                for (int[] cds : coordsRemolino) {\r\n                    salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                    salidaObjetos.writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case HIT:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, por el tipo de ataque, se disparar√°n 4 tiros m√°s al azar.\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El ataque de ca√±√≥n multiple enemigo acert√≥, disparar√° 4 tiros m√°s\");\r\n                for (int i = 0; i < 4; i++) {\r\n                    int[] cds = {Random.randomInt(0,19),Random.randomInt(0,19)};\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n                    ts.getSalidaObjetos().writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case MISS:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void atacarBomba() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[][] fullCoords = (int[][])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        for (int[] coords : fullCoords) {\r\n            for (int i = 0; i < 2; i++) {\r\n                if(i ==1){\r\n                    coords[Random.randomInt(0,1)]++;\r\n                }\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Bomba: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"Te dispar√≥ una bomba en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n                ts.getSalidaObjetos().writeObject(coords);\r\n                while(ts.getObjeto() == null){\r\n                    sleep(500);\r\n                }\r\n                TiposAtaque tipoAtaque = (TiposAtaque)ts.getObjeto();\r\n                ts.setObjeto(null);\r\n                switch(tipoAtaque){\r\n                    case FUENTEDEENERGIA:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a.\");\r\n                        salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                        break;\r\n                    case REMOLINO:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                        int[][] coordsRemolino = {{Random.randomInt(0,19),Random.randomInt(0,19)}, {Random.randomInt(0,19),Random.randomInt(0,19)},{Random.randomInt(0,19),Random.randomInt(0,19)}};\r\n                        for (int[] cds : coordsRemolino) {\r\n                            salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                            salidaObjetos.writeObject(cds);\r\n                            while(ts.getObjeto() == null){\r\n                                sleep(500);\r\n                            }\r\n                            ts.setObjeto(null);\r\n                            salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                            salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                            ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                            ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                        }\r\n                        break;\r\n                    case HIT:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, bien hecho!\");\r\n                        break;\r\n                    case MISS:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void atacarCanonBR() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[][] fullCoords = (int[][])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        for (int[] coords : fullCoords) {\r\n            salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n            salidaDatos.writeUTF(\"Ca√±√≥n de Barba Roja: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n            ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n            ts.getSalidaDatos().writeUTF(\"Te dispar√≥ un Ca√±√≥n de Barba Roja en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n            ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n            ts.getSalidaObjetos().writeObject(coords);\r\n            while (ts.getObjeto() == null) {\r\n                sleep(500);\r\n            }\r\n            TiposAtaque tipoAtaque = (TiposAtaque) ts.getObjeto();\r\n            ts.setObjeto(null);\r\n            switch (tipoAtaque) {\r\n                case FUENTEDEENERGIA:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a.\");\r\n                    salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                    break;\r\n                case REMOLINO:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                    int[][] coordsRemolino = {{Random.randomInt(0, 19), Random.randomInt(0, 19)}, {Random.randomInt(0, 19), Random.randomInt(0, 19)}, {Random.randomInt(0, 19), Random.randomInt(0, 19)}};\r\n                    for (int[] cds : coordsRemolino) {\r\n                        salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                        salidaObjetos.writeObject(cds);\r\n                        while (ts.getObjeto() == null) {\r\n                            sleep(500);\r\n                        }\r\n                        ts.setObjeto(null);\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    }\r\n                    break;\r\n                case HIT:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, bien hecho!\");\r\n                    break;\r\n                case MISS:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //GETTERS Y SETTERS:\r\n\r\n    public boolean isStartPresionado() {\r\n        return startPresionado;\r\n    }\r\n\r\n    public ArrayList<ThreadServidor> getContrincantes() {\r\n        return contrincantes;\r\n    }\r\n\r\n    public String getNombreCliente() {\r\n        return nombreCliente;\r\n    }\r\n\r\n    public ThreadServidor getEnemigoConNombre(String nombre){\r\n        for (ThreadServidor contrincante : contrincantes) {\r\n            if(contrincante.getNombreCliente().equals(nombre)){\r\n                return contrincante;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public DataInputStream getEntradaDatos() {\r\n        return entradaDatos;\r\n    }\r\n\r\n    public DataOutputStream getSalidaDatos() {\r\n        return salidaDatos;\r\n    }\r\n\r\n    public ObjectInputStream getEntradaObjetos() {\r\n        return entradaObjetos;\r\n    }\r\n\r\n    public ObjectOutputStream getSalidaObjetos() {\r\n        return salidaObjetos;\r\n    }\r\n\r\n    public Object getObjeto() {\r\n        return objeto;\r\n    }\r\n\r\n    public void setObjeto(Object objeto) {\r\n        this.objeto = objeto;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Server/ThreadServidor.java b/src/main/java/Server/ThreadServidor.java
--- a/src/main/java/Server/ThreadServidor.java	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/src/main/java/Server/ThreadServidor.java	(date 1732750960453)
@@ -38,11 +38,18 @@
     }
 
     public void run(){
+        mandarIdCliente();
         recibirNombreCliente();
         recibirSiYaInicio();
         juegoEmpieza();
     }
 
+    private void mandarIdCliente(){
+        try{
+            salidaDatos.writeInt(numeroCliente);
+        } catch (IOException ex) {System.out.println("Error mandando id del cliente");}
+    }
+
     private void recibirNombreCliente(){
         try {
             nombreCliente = entradaDatos.readUTF();
@@ -128,6 +135,8 @@
                         atacarCanonBR();
                         break;
                     } catch (Exception ex) {System.out.println("Error con caso ATACARCBR en ThreadServidor");}
+                case PERDER:
+                    servidor.seRendioId(numeroCliente);
             }
         }
     }
@@ -269,6 +278,23 @@
                 salidaDatos.writeUTF("Tu ataque no le di√≥ a nada...");
                 break;
         }
+
+        if(servidor.revisarGane()){
+            for (ThreadServidor contrincante : contrincantes) {
+                contrincante.getSalidaObjetos().writeObject(CasesEnCliente.ALGUIENGANO);
+                contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+            }
+            salidaObjetos.writeObject(CasesEnCliente.YOGANE);
+            return;
+        }
+        //TODO: PONER ESTO DE ABAJO EN CADA ATAQUE, POR AHORA SOLO EST√Å AQUI PARA TESTING
+        servidor.siguienteTurno();
+        salidaObjetos.writeObject(CasesEnCliente.SIGUIENTETURNO);
+        salidaDatos.writeInt(servidor.getTurnoActual());
+        for (ThreadServidor contrincante : contrincantes) {
+            contrincante.getSalidaObjetos().writeObject(CasesEnCliente.SIGUIENTETURNO);
+            contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+        }
     }
 
     private void atacarCanonMult() throws Exception{
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4fad49e6-0c16-4e50-a4c6-3768dd8e4274\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Cliente/Cliente.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Cliente/Cliente.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2oMnTuthV00683CTUdFtmVzrkIB\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.HelloApplication.executor\": \"Run\",\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"Application.MainCliente.executor\": \"Run\",\r\n    \"Application.MainServidor.executor\": \"Run\",\r\n    \"Application.PrimerUsuario.executor\": \"Run\",\r\n    \"Application.SegundoUsuario.executor\": \"Run\",\r\n    \"Application.TercerUsuario.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/artur/AppData/Local/SceneBuilder/SceneBuilder.exe\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"editing.templates\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Application.PrimerUsuario\">\r\n    <configuration name=\"CuartoUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainServidor\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Server.MainServidor\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"Server.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"PrimerUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SegundoUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"TercerUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.SegundoUsuario\" />\r\n      <item itemvalue=\"Application.PrimerUsuario\" />\r\n      <item itemvalue=\"Application.TercerUsuario\" />\r\n      <item itemvalue=\"Application.CuartoUsuario\" />\r\n      <item itemvalue=\"Application.MainServidor\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.MainServidor\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-fdfe4dae3a2d-intellij.indexing.shared.core-IU-243.21565.193\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-e768b9ed790e-JavaScript-IU-243.21565.193\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4fad49e6-0c16-4e50-a4c6-3768dd8e4274\" name=\"Changes\" comment=\"\" />\r\n      <created>1730688324267</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1730688324267</updated>\r\n      <workItem from=\"1730688325230\" duration=\"64000\" />\r\n      <workItem from=\"1730688412823\" duration=\"479000\" />\r\n      <workItem from=\"1730743911188\" duration=\"573000\" />\r\n      <workItem from=\"1730744498006\" duration=\"94000\" />\r\n      <workItem from=\"1730744611083\" duration=\"3334000\" />\r\n      <workItem from=\"1730750503433\" duration=\"139000\" />\r\n      <workItem from=\"1730831699035\" duration=\"16787000\" />\r\n      <workItem from=\"1730849403728\" duration=\"911000\" />\r\n      <workItem from=\"1730850713113\" duration=\"324000\" />\r\n      <workItem from=\"1730943720171\" duration=\"1583000\" />\r\n      <workItem from=\"1731029507068\" duration=\"318000\" />\r\n      <workItem from=\"1731099917659\" duration=\"31000\" />\r\n      <workItem from=\"1731130225065\" duration=\"413000\" />\r\n      <workItem from=\"1731172770777\" duration=\"10640000\" />\r\n      <workItem from=\"1731363817313\" duration=\"273000\" />\r\n      <workItem from=\"1731364235778\" duration=\"613000\" />\r\n      <workItem from=\"1731542602422\" duration=\"12021000\" />\r\n      <workItem from=\"1731695249751\" duration=\"1725000\" />\r\n      <workItem from=\"1731697033197\" duration=\"1667000\" />\r\n      <workItem from=\"1731706536799\" duration=\"17678000\" />\r\n      <workItem from=\"1731774628430\" duration=\"1839000\" />\r\n      <workItem from=\"1731817733998\" duration=\"7189000\" />\r\n      <workItem from=\"1731899655457\" duration=\"1224000\" />\r\n      <workItem from=\"1731960866531\" duration=\"8712000\" />\r\n      <workItem from=\"1731979516954\" duration=\"20734000\" />\r\n      <workItem from=\"1732047788319\" duration=\"9837000\" />\r\n      <workItem from=\"1732432480378\" duration=\"11761000\" />\r\n      <workItem from=\"1732640435210\" duration=\"19137000\" />\r\n      <workItem from=\"1732739723118\" duration=\"10566000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/.idea/workspace.xml	(date 1732751019943)
@@ -7,8 +7,11 @@
     <list default="true" id="4fad49e6-0c16-4e50-a4c6-3768dd8e4274" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/Cliente.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/Cliente.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnCliente.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnCliente.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnThreadServidor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnThreadServidor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Server/Server.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Server/Server.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Server/ThreadServidor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Server/ThreadServidor.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -45,33 +48,33 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.HelloApplication.executor": "Run",
-    "Application.Main.executor": "Run",
-    "Application.MainCliente.executor": "Run",
-    "Application.MainServidor.executor": "Run",
-    "Application.PrimerUsuario.executor": "Run",
-    "Application.SegundoUsuario.executor": "Run",
-    "Application.TercerUsuario.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "main",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "C:/Users/artur/AppData/Local/SceneBuilder/SceneBuilder.exe",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "editing.templates",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.HelloApplication.executor&quot;: &quot;Run&quot;,
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
+    &quot;Application.MainCliente.executor&quot;: &quot;Run&quot;,
+    &quot;Application.MainServidor.executor&quot;: &quot;Run&quot;,
+    &quot;Application.PrimerUsuario.executor&quot;: &quot;Run&quot;,
+    &quot;Application.SegundoUsuario.executor&quot;: &quot;Run&quot;,
+    &quot;Application.TercerUsuario.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;Ale&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/artur/AppData/Local/SceneBuilder/SceneBuilder.exe&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;editing.templates&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager" selected="Application.PrimerUsuario">
     <configuration name="CuartoUsuario" type="Application" factoryName="Application">
       <option name="MAIN_CLASS_NAME" value="Cliente.MainCliente" />
@@ -130,8 +133,8 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-jdk-9823dce3aa75-fdfe4dae3a2d-intellij.indexing.shared.core-IU-243.21565.193" />
-        <option value="bundled-js-predefined-d6986cc7102b-e768b9ed790e-JavaScript-IU-243.21565.193" />
+        <option value="bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23726.103" />
+        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23726.103" />
       </set>
     </attachedChunks>
   </component>
@@ -171,7 +174,7 @@
       <workItem from="1732047788319" duration="9837000" />
       <workItem from="1732432480378" duration="11761000" />
       <workItem from="1732640435210" duration="19137000" />
-      <workItem from="1732739723118" duration="10566000" />
+      <workItem from="1732739499963" duration="7698000" />
     </task>
     <servers />
   </component>
Index: src/main/java/Modelos/CasesEnCliente.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Modelos;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic enum CasesEnCliente implements Serializable {\r\n    NADA,\r\n    RECIBIRMENSAJE,\r\n    RECIBIRACCION,\r\n    RECIBIROFERTA,\r\n    OFERTAACEPTADA,\r\n    DEVOLVERGRAFO,\r\n    SETGRAFOENEMIGO,\r\n    RECIBIROFERTAACERO,\r\n    OFERTAACEPTADAACERO,\r\n    SERATACADO,\r\n    CONSEGUIRFUENTE,\r\n    PONERENBITACORA\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Modelos/CasesEnCliente.java b/src/main/java/Modelos/CasesEnCliente.java
--- a/src/main/java/Modelos/CasesEnCliente.java	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/src/main/java/Modelos/CasesEnCliente.java	(date 1732750960451)
@@ -4,6 +4,7 @@
 
 public enum CasesEnCliente implements Serializable {
     NADA,
+    SIGUIENTETURNO,
     RECIBIRMENSAJE,
     RECIBIRACCION,
     RECIBIROFERTA,
@@ -14,6 +15,8 @@
     OFERTAACEPTADAACERO,
     SERATACADO,
     CONSEGUIRFUENTE,
-    PONERENBITACORA
+    PONERENBITACORA,
+    ALGUIENGANO,
+    YOGANE
 
 }
Index: src/main/java/Modelos/CasesEnThreadServidor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Modelos;\r\n\r\npublic enum CasesEnThreadServidor {\r\n    NADA,\r\n    MANDARMENSAJE,\r\n    MANDARACCION,\r\n    DEVOLVERNOMBRESOPONENTES,\r\n    PROPONERVENTA,\r\n    PONERENOBJETO,\r\n    CONSEGUIRGRAFOENEMIGO,\r\n    ATACARCANON,\r\n    ATACARCANONMULT,\r\n    ATACARBOMBA,\r\n    ATACARCBR,\r\n    PROPONERVENTAACERO\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Modelos/CasesEnThreadServidor.java b/src/main/java/Modelos/CasesEnThreadServidor.java
--- a/src/main/java/Modelos/CasesEnThreadServidor.java	(revision b5dad3889de8a08918318eead620b72d003c53ff)
+++ b/src/main/java/Modelos/CasesEnThreadServidor.java	(date 1732750960451)
@@ -12,5 +12,6 @@
     ATACARCANONMULT,
     ATACARBOMBA,
     ATACARCBR,
-    PROPONERVENTAACERO
+    PROPONERVENTAACERO,
+    PERDER
 }
