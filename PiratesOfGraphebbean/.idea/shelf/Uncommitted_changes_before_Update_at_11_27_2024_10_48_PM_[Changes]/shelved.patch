Index: src/main/java/Cliente/MainGameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Cliente;\r\n\r\nimport Cliente.Grafo.MapaDelMar;\r\nimport Modelos.CasesEnThreadServidor;\r\nimport Modelos.Random;\r\nimport Modelos.TiposAtaque;\r\nimport Modelos.Utilities;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Line;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\n\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\n\r\n\r\n//import javax.mail.Store; TODO DESCOMENTAR ESTO\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\npublic class MainGameController {\r\n    private Stage stage;\r\n    private Scene scene;\r\n    private Parent root;\r\n\r\n    private String userName;\r\n    private Cliente cliente;\r\n    private MapaDelMar mapaDelMar;\r\n    private boolean comodinListo;\r\n\r\n    private StoreController storeActual;\r\n\r\n    static final HashMap<String, List<Integer>> hashPosItems = new HashMap<String, List<Integer>>();\r\n\r\n    static final HashMap<List<Integer>, List<List<Integer>>> hashAllCoords = new HashMap<List<Integer>, List<List<Integer>>>();\r\n\r\n    @FXML private Label lblComodinTimer;\r\n\r\n    @FXML private Button btnEscudo;\r\n\r\n    @FXML private Button btnKraken;\r\n\r\n    @FXML private Label lblMinaTimer;\r\n\r\n    @FXML private AnchorPane anchorPane;\r\n\r\n    @FXML private Button btnSend;\r\n\r\n    @FXML private GridPane PantallaJugador;\r\n\r\n    @FXML private GridPane PantallaEnemigo;\r\n\r\n    @FXML private TextArea txaChat;\r\n\r\n    @FXML private TextField txfMensaje;\r\n\r\n    @FXML private TextArea txaAcciones;\r\n\r\n    @FXML private ComboBox<String> itemComboBox;\r\n\r\n    @FXML private ComboBox<String> conectorComboBox;\r\n\r\n    @FXML private ComboBox<String> placeItemComboBox;\r\n\r\n    @FXML private Spinner<Integer> coordX;\r\n\r\n    @FXML private Spinner<Integer> coordY;\r\n\r\n    @FXML private ComboBox<String> cbxVerEnemy;\r\n\r\n    @FXML private TextField coordX1;\r\n\r\n    @FXML private TextField coordY1;\r\n\r\n    @FXML private Spinner<Integer> sbxC_X;      @FXML private Spinner<Integer> sbxC_Y;\r\n\r\n    @FXML private Spinner<Integer> sbxCM_X;      @FXML private Spinner<Integer> sbxCM_Y;\r\n\r\n    @FXML private Spinner<Integer> sbxBomb1_X;      @FXML private Spinner<Integer> sbxBomb1_Y;\r\n    @FXML private Spinner<Integer> sbxBomb2_X;      @FXML private Spinner<Integer> sbxBomb2_Y;\r\n    @FXML private Spinner<Integer> sbxBomb3_X;      @FXML private Spinner<Integer> sbxBomb3_Y;\r\n\r\n    @FXML private Spinner<Integer> sbxCBR1_X;   @FXML private Spinner<Integer> sbxCBR1_Y;\r\n    @FXML private Spinner<Integer> sbxCBR2_X;   @FXML private Spinner<Integer> sbxCBR2_Y;\r\n    @FXML private Spinner<Integer> sbxCBR3_X;   @FXML private Spinner<Integer> sbxCBR3_Y;\r\n    @FXML private Spinner<Integer> sbxCBR4_X;   @FXML private Spinner<Integer> sbxCBR4_Y;\r\n    @FXML private Spinner<Integer> sbxCBR5_X;   @FXML private Spinner<Integer> sbxCBR5_Y;\r\n    @FXML private Spinner<Integer> sbxCBR6_X;   @FXML private Spinner<Integer> sbxCBR6_Y;\r\n    @FXML private Spinner<Integer> sbxCBR7_X;   @FXML private Spinner<Integer> sbxCBR7_Y;\r\n    @FXML private Spinner<Integer> sbxCBR8_X;   @FXML private Spinner<Integer> sbxCBR8_Y;\r\n    @FXML private Spinner<Integer> sbxCBR9_X;   @FXML private Spinner<Integer> sbxCBR9_Y;\r\n    @FXML private Spinner<Integer> sbxCBR10_X;  @FXML private Spinner<Integer> sbxCBR10_Y;\r\n\r\n\r\n\r\n    private List<int[][]> coordenadas = new ArrayList<>();\r\n    private List<List<Integer>> coordenadasConector = new ArrayList<>();\r\n    //private List<String> itemsInScreen = new ArrayList<>();\r\n    private Spinner<Integer>[] spinnersC;\r\n    private Spinner<Integer>[] spinnersCM;\r\n    private Spinner<Integer>[][] spinnersBomb;\r\n    private Spinner<Integer>[][] spinnersCBR;\r\n\r\n\r\n    private static int getNumberFromString(String item) {\r\n        System.out.println(item);\r\n        int number = switch (item) {\r\n            case \"Energia\" -> 1;\r\n            case \"Mina\" -> 2;\r\n            case \"Templo\" -> 3;\r\n            case \"Tienda\" -> 4;\r\n            case \"Conector\" -> 5;\r\n            case \"Tornado\" -> 7;\r\n            default -> {\r\n                System.out.println(\"√çtem no reconocido: \" + item);\r\n                yield -1;\r\n            }\r\n        };\r\n        return number;\r\n    }\r\n\r\n    public static void colocarEnHash(String text, List<Integer> pos){\r\n        hashPosItems.put(text, pos);\r\n    }\r\n\r\n    public static void colocarTodasCoordsHash(int x, int y, int val){\r\n        List<Integer> key = new ArrayList<>();\r\n        key.add(x);\r\n        key.add(y);\r\n        // Ahora aqui es en donde yo voy a comenzar a usar el hash para guardar las coordenadas;\r\n        List<List<Integer>> allKeys = new ArrayList<>();\r\n        // Ahora si aqui vienen los casos\r\n        // FALTA PONER LOS CASOS QUE AUN NO ESTAN\r\n        if(val == 1){\r\n            List<Integer> firstCoord = new ArrayList<>();\r\n            List<Integer> secondCoord = new ArrayList<>();\r\n            List<Integer> thirdCoord = new ArrayList<>();\r\n            List<Integer> fourthCoord = new ArrayList<>();\r\n            firstCoord.add(x);\r\n            firstCoord.add(y);\r\n\r\n            secondCoord.add(x + 1);\r\n            secondCoord.add(y);\r\n\r\n            thirdCoord.add(x);\r\n            thirdCoord.add(y + 1);\r\n\r\n            fourthCoord.add(x + 1);\r\n            fourthCoord.add(y + 1);\r\n\r\n            allKeys.add(firstCoord);\r\n            allKeys.add(secondCoord);\r\n            allKeys.add(thirdCoord);\r\n            allKeys.add(fourthCoord);\r\n            hashAllCoords.put(key, allKeys);\r\n        } else if (val == 2 || val == 4){\r\n            List<Integer> firstCoord = new ArrayList<>();\r\n            List<Integer> secondCoord = new ArrayList<>();\r\n\r\n            firstCoord.add(x);\r\n            firstCoord.add(y);\r\n\r\n            secondCoord.add(x + 1);\r\n            secondCoord.add(y);\r\n\r\n            allKeys.add(firstCoord);\r\n            allKeys.add(secondCoord);\r\n            hashAllCoords.put(key, allKeys);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static List<List<Integer>> obtenerCoordsPorLlave(int x, int y) {\r\n        List<Integer> key = new ArrayList<>();\r\n        key.add(x);\r\n        key.add(y);\r\n        if (hashAllCoords.containsKey(key)) {\r\n            return hashAllCoords.get(key);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void loadAccordion(List<String> items) {\r\n        for(int i = 0; i < items.size(); i++) {\r\n            itemComboBox.getItems().add(items.get(i));\r\n        }\r\n        items.clear();\r\n    }\r\n\r\n    public void loadDataComboBox() {\r\n        itemComboBox.getItems().clear();\r\n        for(int i = 0; i < cliente.getListaItems().size(); i++) {\r\n            itemComboBox.getItems().add(cliente.getListaItems().get(i));\r\n        }\r\n    }\r\n\r\n    public void setUserData(Cliente _cliente){\r\n        // Como esto se corre cuando se inicializa la aplicacion, aqui vamos a poner los items principales de la pantalla\r\n        this.userName = _cliente.getNombreCliente();\r\n        this.cliente = _cliente;\r\n        agruparSpinnersAtaque();\r\n        loadDataComboBox();\r\n        loadEnemigosCbx();\r\n        setSpinners();\r\n        mapaDelMar = new MapaDelMar(PantallaJugador, 20);\r\n        mapaDelMar.inicializarGrid();\r\n        new Thread(() -> cronoMina()).start();\r\n        new Thread(() -> cronoComodin()).start();\r\n    }\r\n\r\n    private void loadEnemigosCbx(){\r\n        for (String oponente : cliente.getNombresOponentes()) {\r\n            cbxVerEnemy.getItems().add(oponente);\r\n        }\r\n    }\r\n\r\n    private void setSpinners(){\r\n        //sbxPrecioComponente.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(100, 3000, 100, 100));\r\n        coordX.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 1, 1));\r\n        coordY.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 1, 1));\r\n        for (Spinner<Integer> spinner : spinnersC) {\r\n            spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 0, 1));\r\n        }\r\n\r\n        for (Spinner<Integer> spinner : spinnersCM) {\r\n            spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 0, 1));\r\n        }\r\n\r\n        for (Spinner<Integer>[] row : spinnersBomb) {\r\n            for (Spinner<Integer> spinner : row) {\r\n                spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 18, 0, 1));\r\n            }\r\n        }\r\n\r\n        for (Spinner<Integer>[] row : spinnersCBR) {\r\n            for (Spinner<Integer> spinner : row) {\r\n                spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 19, 0, 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    private void agruparSpinnersAtaque(){\r\n        spinnersC = new Spinner[] { sbxC_X, sbxC_Y };\r\n        spinnersCM = new Spinner[] { sbxCM_X, sbxCM_Y };\r\n\r\n        spinnersBomb = new Spinner[][] {\r\n                { sbxBomb1_X, sbxBomb1_Y },\r\n                { sbxBomb2_X, sbxBomb2_Y },\r\n                { sbxBomb3_X, sbxBomb3_Y }\r\n        };\r\n\r\n        spinnersCBR = new Spinner[][] {\r\n                { sbxCBR1_X, sbxCBR1_Y },\r\n                { sbxCBR2_X, sbxCBR2_Y },\r\n                { sbxCBR3_X, sbxCBR3_Y },\r\n                { sbxCBR4_X, sbxCBR4_Y },\r\n                { sbxCBR5_X, sbxCBR5_Y },\r\n                { sbxCBR6_X, sbxCBR6_Y },\r\n                { sbxCBR7_X, sbxCBR7_Y },\r\n                { sbxCBR8_X, sbxCBR8_Y },\r\n                { sbxCBR9_X, sbxCBR9_Y },\r\n                { sbxCBR10_X, sbxCBR10_Y }\r\n        };\r\n    }\r\n\r\n    private void dibujarLinea(AnchorPane anchorPane, double x1, double y1, double x2, double y2) {\r\n        Line line = new Line(x1, y1, x2, y2);\r\n        line.setStrokeWidth(2);\r\n        line.setStroke(javafx.scene.paint.Color.BLUE);\r\n        anchorPane.getChildren().add(line);\r\n    }\r\n\r\n    private void drawLine(AnchorPane anchorPane, int x1, int y1, int x2, int y2) {\r\n        int StartX = 252 + x1*24;\r\n        int StartY = 100 + y1*24;\r\n        int EndX = 252 + x2*24;\r\n        int EndY = 100 + y2*24;\r\n        Line line = new Line(StartX, StartY, EndX, EndY);\r\n        line.setStrokeWidth(2);\r\n        line.setStroke(javafx.scene.paint.Color.BLUE);\r\n        anchorPane.getChildren().add(line);\r\n    }\r\n\r\n\r\n    private void placeImage(AnchorPane anchorPane, int x, int y, String item) {\r\n        int posX = 242 + x * 24;\r\n        int posY = 90 + y * 24;\r\n        String imagePath = \"/Images/\" + item + \".jpg\";\r\n        System.out.println(String.valueOf(getClass().getResource(imagePath)));\r\n        Image image = new Image(String.valueOf(getClass().getResource(imagePath)));\r\n\r\n        ImageView imageView = new ImageView(image);\r\n        if(item == \"Conector\" || item == \"Tornado\" || item == \"Destruccion\") {\r\n            imageView.setFitWidth(24);\r\n            imageView.setFitHeight(24);\r\n        } else if (item == \"Tienda\") {\r\n            imageView.setFitWidth(24);\r\n            imageView.setFitHeight(48);\r\n        } else if (item == \"Energia\") {\r\n            imageView.setFitWidth(48);\r\n            imageView.setFitHeight(48);\r\n        }\r\n\r\n\r\n        imageView.setLayoutX(posX);\r\n        imageView.setLayoutY(posY);\r\n        anchorPane.getChildren().add(imageView);\r\n    }\r\n\r\n\r\n    public void recibeGrafoEnemigo(String grafo) {\r\n        // Dibujar en pantalla\r\n        System.out.println(grafo);\r\n        String[] partes = grafo.split(\"t=&\");\r\n        // Tengo el grafo ahora tengo que procesarlo\r\n        List<List<Integer>> listaAdyacencia = new ArrayList<>();\r\n        int[][] matrizTipos;\r\n        int[][] matrizTiposCopia;\r\n        boolean[][] matrizDestruccion;\r\n\r\n\r\n        System.out.println(partes[0]);\r\n        System.out.println(partes[1]);\r\n        System.out.println(partes[2]);\r\n\r\n        listaAdyacencia = mapaDelMar.deserializeListaAdyacencia(partes[0]);\r\n        matrizTipos = mapaDelMar.deserializeMatrix(partes[1]);\r\n        matrizTiposCopia =  mapaDelMar.deserializeMatrix(partes[1]);\r\n        matrizDestruccion = mapaDelMar.deserializeBooleanMatrix(partes[2]);\r\n\r\n        System.out.println(listaAdyacencia);\r\n        //System.out.println(matrizTipos.toString());\r\n        System.out.println(Arrays.deepToString(matrizTipos));\r\n        System.out.println(Arrays.deepToString(matrizDestruccion));\r\n\r\n        /**\r\n        for(int i = 0; i < listaAdyacencia.size(); i++) {\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(1)][listaAdyacencia.get(i).get(0)]);\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(3)][listaAdyacencia.get(i).get(2)]);\r\n        }\r\n\r\n        for(int i = 0; i < listaAdyacencia.size(); i++) {\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(0)][listaAdyacencia.get(i).get(1)]);\r\n            System.out.println(matrizTipos[listaAdyacencia.get(i).get(2)][listaAdyacencia.get(i).get(3)]);\r\n        }\r\n         */\r\n        List<List<Integer>> conexionesFuente = new ArrayList<>();\r\n        conexionesFuente = mapaDelMar.obtenerConexFuente(listaAdyacencia, matrizDestruccion, matrizTipos);\r\n        System.out.println(\"ADY\" + listaAdyacencia);\r\n        System.out.println(conexionesFuente);\r\n        for(int i = 0; i < conexionesFuente.size(); i++) {\r\n            System.out.println(conexionesFuente.get(i));\r\n\r\n            if(matrizTipos[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] == 2\r\n            || matrizTipos[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] == 3 ||\r\n                    matrizTipos[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] == 4\r\n            ){\r\n                matrizTiposCopia[conexionesFuente.get(i).get(1) + 1][conexionesFuente.get(i).get(0)] = 0;\r\n            }\r\n            matrizTiposCopia[conexionesFuente.get(i).get(1)][conexionesFuente.get(i).get(0)] = 0;\r\n        }\r\n        mapaDelMar.inicializarGridEnemgio(matrizTiposCopia,  PantallaEnemigo);\r\n        // Lo que no esta conectado a la fuente tengo que mostrarlo :)\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnVerEnemyClick() {\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        try {\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.CONSEGUIRGRAFOENEMIGO);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n        } catch (Exception e) {System.out.println(\"Error consiguiendo grafo enemigo\");}\r\n    }\r\n\r\n    public void testLineDraw() {\r\n        String selectedConnector = conectorComboBox.getValue();\r\n        String selectedItem = placeItemComboBox.getValue();\r\n        if (selectedConnector != null) {\r\n            String[] coordinates = selectedConnector.split(\",\");\r\n            try {\r\n                int x = Integer.parseInt(coordinates[0].trim());\r\n                int y = Integer.parseInt(coordinates[1].trim());\r\n                System.out.println(\"X: \" + x + \", Y: \" + y);\r\n                // conectorComboBox.getItems().remove(selectedConnector);\r\n                // Ahora hay que pasarle las del item :)\r\n                System.out.println(selectedItem);\r\n                List<Integer> listaCoordenadasItem  = hashPosItems.get(selectedItem);\r\n                drawLine(anchorPane, x, y, listaCoordenadasItem.get(0), listaCoordenadasItem.get(1));\r\n                mapaDelMar.conectarIslas(x, y, listaCoordenadasItem.get(0), listaCoordenadasItem.get(1)); // Por ahora solo conecto el item papa\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Error: formato inv√°lido en selectedConnector.\");\r\n            } catch (ArrayIndexOutOfBoundsException e) {\r\n                System.out.println(\"Error: selectedConnector no tiene el formato esperado.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"No hay conector seleccionado.\");\r\n        }\r\n    }\r\n\r\n\r\n    public void backFromStore(Cliente _cliente, MapaDelMar _mapaDelMar){\r\n        this.cliente = _cliente;\r\n        loadDataComboBox();\r\n        this.mapaDelMar = _mapaDelMar;\r\n        for(int i = 0; i < mapaDelMar.getMatrizTipos().length; i++){\r\n            System.out.println(Arrays.toString(mapaDelMar.getMatrizTipos()[i]));\r\n        }\r\n        mapaDelMar.inicializarGrid();\r\n        mapaDelMar.recrearGrid(PantallaJugador);\r\n    }\r\n\r\n    public void updateGUIDespuesDeOfertaOCompra(){\r\n        if(storeActual != null){\r\n            Platform.runLater(() -> storeActual.actualizarComponentesCbx());\r\n            Platform.runLater(() -> storeActual.actualizarDinero());\r\n            Platform.runLater(() -> storeActual.actualizarAcero());\r\n        } else {\r\n            Platform.runLater(() ->loadDataComboBox());\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnSendClick(){\r\n        String mensaje = cliente.getNombreCliente() + \": \" + txfMensaje.getText();\r\n        cliente.mandarMensaje(mensaje);\r\n        txfMensaje.clear();\r\n    }\r\n\r\n    @FXML protected void btnGoStore() {\r\n        if(!mapaDelMar.getItemsInScreen().contains(\"Tienda\")){return;}\r\n\r\n        Platform.runLater(() -> {\r\n            try {\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Cliente/StoreScreen.fxml\"));\r\n                Parent root = loader.load();\r\n                StoreController controller = loader.getController();\r\n                storeActual = controller;\r\n                controller.setGameController(cliente, mapaDelMar);\r\n                Stage popupStage = new Stage();\r\n                popupStage.setTitle(\"Store\");\r\n                popupStage.initModality(Modality.WINDOW_MODAL);\r\n                popupStage.initOwner(MainCliente.getPrimaryStage());\r\n                Scene scene = new Scene(root);\r\n                popupStage.setScene(scene);\r\n\r\n                popupStage.setOnHidden(event -> {\r\n                    System.out.println(\"El pop-up ha sido cerrado.\");\r\n                    itemComboBox.getItems().clear();\r\n                    loadDataComboBox();\r\n                    storeActual = null;\r\n                });\r\n                popupStage.show();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @FXML\r\n    protected void btnProcessData(ActionEvent event){\r\n        String selectedItem = itemComboBox.getValue();\r\n        int selectedInt = getNumberFromString(selectedItem);\r\n        /**\r\n        int coordXInt = Integer.parseInt(coordX.getText());\r\n        int coordYInt = Integer.parseInt(coordY.getText());\r\n         */\r\n        int coordXInt = coordX.getValue();\r\n        int coordYInt = coordY.getValue();\r\n        // PROCESA\r\n        // 1. Tengo que ver si lo puedo colocar donde se quiere:\r\n        // Este verificador debe de tomar todos los bloques del evento en cuenta\r\n        if(mapaDelMar.estaDisponibleItem(coordXInt, coordYInt, selectedInt)) {\r\n\r\n            mapaDelMar.asignarTipoIsla(coordYInt, coordXInt, selectedInt); // En este item se agrega la logica para cubrir todos los bloques\r\n            // TENGO QUE VER COMO LLEVO UN REGISTRO DE ESTO\r\n            mapaDelMar.inicializarGrid();\r\n            itemComboBox.getItems().remove(selectedItem);\r\n            cliente.getListaItems().remove(selectedItem);\r\n            // Yo deberia de tomar esto, y guardarlo en algo que me permita saber que item esta en que coordenada?\r\n\r\n            if (Objects.equals(selectedItem, \"Conector\")) {\r\n                List<Integer> coordenadasConect = new ArrayList<>();\r\n                coordenadasConect.add(coordXInt);\r\n                coordenadasConect.add(coordYInt);\r\n                String itemComboBox = coordX.getValue().toString() + \",\" + coordY.getValue().toString();\r\n                coordenadasConector.add(coordenadasConect);\r\n                conectorComboBox.getItems().add(itemComboBox);\r\n                // Ahora, debo de registrar en el grafo que existe una liga\r\n                placeImage(anchorPane, coordXInt, coordYInt, \"Conector\");\r\n            } else {\r\n                mapaDelMar.getItemsInScreen().add(selectedItem);\r\n                // El item es algo que puede ser conectado\r\n                // Hay que hacer el hash que guarda la informacion de conexcion\r\n                placeItemComboBox.getItems().add(selectedItem);\r\n                List<Integer> coordItem = new ArrayList<>();\r\n                coordItem.add(coordXInt);\r\n                coordItem.add(coordYInt);\r\n                colocarEnHash(selectedItem, coordItem);\r\n                // Voy a hacer otro hash que sea, coordInciialx, coordinicialy, (todo el resto de coordenadas)\r\n                colocarTodasCoordsHash(coordXInt, coordYInt, selectedInt); // Ya aqui deberian de estar todas las coordenadas de cada item\r\n                placeImage(anchorPane, coordXInt, coordYInt, selectedItem);\r\n                // Ahora tengo que asignar todos los cuadros en mapaDelMar\r\n            }\r\n        } else {\r\n            // Debe de haber un laben en pantalla en donde le muestro el error\r\n            System.out.println(\"Hay algun bloque ocupado.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * La funcion de ataque devuelva un enum\r\n     * ¬øQue casos?\r\n     * -> Que ataco a una fuente de energia (Me la da) (En cualquier casilla)\r\n     * -> Que ataque a un remolino (Se debe de ejecutar la funcion que envia ataques)\r\n     * -> No le di a nada (Tengo que dejar marcado que el me disparo ahi)\r\n     * -> Si le di a algo (No puede estar dentro de lo especificado) (Se debe de tramitar bien el item como eliminado en el grafo)\r\n     * -> y eso\r\n     */\r\n\r\n    private void cronoMina(){\r\n        while(true){\r\n            int[] sec = {0};\r\n            int[] min = {1};\r\n            while(sec[0] != 0 || min[0] != 0){\r\n                sec[0]--;\r\n                if(sec[0]<0){\r\n                    min[0]--;\r\n                    sec[0] = 59;\r\n                }\r\n                Platform.runLater(() -> lblMinaTimer.setText(Utilities.formatearEnTimer(min[0]) + \":\" + Utilities.formatearEnTimer(sec[0])));\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            }\r\n            generarAcero();\r\n        }\r\n    }\r\n\r\n    private void generarAcero(){\r\n        int minas = Collections.frequency(mapaDelMar.getItemsInScreen(),\"Mina\");\r\n        cliente.subirAcero(minas*100);\r\n    }\r\n\r\n    private void cronoComodin(){\r\n        while(true){\r\n            int[] sec = {0};\r\n            int[] min = {5};\r\n            Platform.runLater(()-> lblComodinTimer.setText(\"N/A\"));\r\n            while(!mapaDelMar.getItemsInScreen().contains(\"Templo\")){\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            } //si no tiene templo, entonces a esperar\r\n\r\n            while(!comodinListo){\r\n                if(!mapaDelMar.getItemsInScreen().contains(\"Templo\")){break;}\r\n                sec[0]--;\r\n                if(sec[0]==0 && min[0] ==0){\r\n                    comodinListo = true;\r\n                    Platform.runLater(()-> lblComodinTimer.setText(\"Comod√≠n Listo\"));\r\n                    comodinListo();\r\n                    continue;\r\n                } else if(sec[0]<0 && min[0] > 0){\r\n                    min[0]--;\r\n                    sec[0] = 59;\r\n                }\r\n                Platform.runLater(()-> lblComodinTimer.setText(Utilities.formatearEnTimer(min[0]) + \":\" + Utilities.formatearEnTimer(sec[0])));\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            }\r\n            while(comodinListo){\r\n                if(!mapaDelMar.getItemsInScreen().contains(\"Templo\")){\r\n                    btnEscudo.setDisable(true);\r\n                    btnKraken.setDisable(true);\r\n                    break;\r\n                }\r\n                try {Thread.sleep(1000);} catch (InterruptedException ignore) {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void comodinListo(){\r\n        if(Random.randomBoolean()){\r\n            btnEscudo.setDisable(false);\r\n        } else {\r\n            btnKraken.setDisable(false);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnEscudoClick(){\r\n        btnEscudo.setDisable(false);\r\n        //TODO\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnKrakenClick(){\r\n        btnKraken.setDisable(false);\r\n        //TODO\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnCClick(){\r\n        System.out.println(cliente.getTurnoActual() + \" \" + cliente.getIdCliente());\r\n        if(cliente.getTurnoActual() != cliente.getIdCliente()) {\r\n            System.out.println(\"NO VAS A ATACAR \");\r\n            return;\r\n        }\r\n\r\n        //TODO: revisar turno, y que no he perdido, ESTO PARA LOS 4 ATAQUES\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getCanon() <= 0){return;}\r\n        cliente.usarCanon();\r\n\r\n        try {\r\n            int[] coords = new int[2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                coords[i] = spinnersC[i].getValue();\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARCANON);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con ca√±on\");}\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnCMClick(){\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getCanonMult() <= 0){return;}\r\n        cliente.usarCanonMult();\r\n\r\n        try {\r\n            int[] coords = new int[2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                coords[i] = spinnersCM[i].getValue();\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARCANONMULT);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con ca√±on m√∫ltiple\");}\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnBombClick(){\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getBomba() <= 0){return;}\r\n        cliente.usarBomba();\r\n\r\n        try {\r\n            int[][] coords = new int[3][2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                for (int j = 0; j < 2; j++) {\r\n                    coords[i][j] = spinnersBomb[i][j].getValue();\r\n                }\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARBOMBA);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con bomba\");}\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnCBRClick(){\r\n        String nombreEnemigo = cbxVerEnemy.getValue();\r\n        if(nombreEnemigo==null){return;}\r\n        if(cliente.getCanonBR() <= 0){return;}\r\n        cliente.usarCanonBR();\r\n\r\n        try {\r\n            int[][] coords = new int[10][2];\r\n            for (int i = 0; i < coords.length; i++) {\r\n                for (int j = 0; j < 2; j++) {\r\n                    coords[i][j] = spinnersCBR[i][j].getValue();\r\n                }\r\n            }\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.ATACARCBR);\r\n            cliente.getSalidaDatos().writeUTF(nombreEnemigo);\r\n            cliente.getSalidaObjetos().writeObject(coords);\r\n        } catch (Exception e) {System.out.println(\"Error atacando con Ca√±√≥n de Barba Roja\");}\r\n    }\r\n\r\n    public TiposAtaque atacarIsla(int x, int y){\r\n        // Nunca se debe de retornar null\r\n        //return CasesEnCliente.NADA; // El caso de nothing\r\n        System.out.println(\"Ataque \" + x + \" \" + y);\r\n        // Lo primero que vamos a hacer es poner el ataque en matriz destruccion\r\n        mapaDelMar.getMatrizDestruccion()[y][x] = true; // Esta isla ya fue atacada :(\r\n        placeImage(anchorPane, x, y, \"Destruccion\");\r\n        if(mapaDelMar.getMatrizTipos()[y][x] == 1){\r\n            // reviso al rededor\r\n            // arriba, abajo izquierda, derecha\r\n            if(mapaDelMar.getMatrizTipos()[y + 1][x] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y + 1][x] = true;\r\n            }\r\n            if(mapaDelMar.getMatrizTipos()[y - 1][x] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y - 1][x] = true;\r\n            }if(mapaDelMar.getMatrizTipos()[y][x + 1] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y][x + 1] = true;\r\n            }if(mapaDelMar.getMatrizTipos()[y][x - 1] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y][x - 1] = true;\r\n            }\r\n            // Diag arriba, diag abajo, diag izquierda, diag derecha\r\n            if(mapaDelMar.getMatrizTipos()[y + 1][x + 1] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y + 1][x + 1]= true;\r\n            }if(mapaDelMar.getMatrizTipos()[y + 1][x - 1] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y + 1][x - 1] = true;\r\n            }if(mapaDelMar.getMatrizTipos()[y - 1][x - 1] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y - 1][x - 1] = true;\r\n            }if(mapaDelMar.getMatrizTipos()[y - 1][x + 1] == 1) {\r\n                mapaDelMar.getMatrizDestruccion()[y - 1][x + 1] = true;\r\n            }\r\n        }\r\n        // Ahora tengo que ver que esta en esa coordenada en la martiz, y en base a eso tomar una desicion :)\r\n        System.out.println(\"Ataque \" + mapaDelMar.getMatrizTipos()[x][y]);\r\n        System.out.println(\"ITINSC\" + mapaDelMar.getItemsInScreen());\r\n        if(mapaDelMar.getMatrizTipos()[y][x] != 0){\r\n            // Primer caso IMPORTANTE, cuando le doy a una fuente de energia :(\r\n            // Tengo que ver cuales son el resto de coordenadas de esa fuente para destruirlas tambien\r\n            if(mapaDelMar.getMatrizTipos()[y][x] == 1){\r\n                // Tengo que darle al enemigo una fuente de energia y destuir la mia\r\n                // DESTRUCCION DE MI FUENTE DE ENERGIA\r\n                mapaDelMar.getItemsInScreen().remove(\"Energia\");\r\n                // Tengo que indicar que esta fuente de energia no esta, para que muestre lo que ahora es disconexo :P\r\n                return TiposAtaque.FUENTEDEENERGIA;\r\n            } else if (mapaDelMar.getMatrizTipos()[y][x] == 4){\r\n                mapaDelMar.getItemsInScreen().remove(\"Tienda\");\r\n                return TiposAtaque.HIT;\r\n            }\r\n        }\r\n\r\n        // Lo ultimo es darle feedback al usuario de lo que paso :)\r\n        return TiposAtaque.MISS;\r\n    }\r\n\r\n\r\n    public TextArea getTxaChat() {\r\n        return txaChat;\r\n    }\r\n\r\n    public TextArea getTxaAcciones(){\r\n        return txaAcciones;\r\n    }\r\n\r\n    public MapaDelMar getMapaDelMar() {\r\n        return mapaDelMar;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Cliente/MainGameController.java b/src/main/java/Cliente/MainGameController.java
--- a/src/main/java/Cliente/MainGameController.java	(revision 893e5798199b4320bfb815e29979c7b8b07f9bf4)
+++ b/src/main/java/Cliente/MainGameController.java	(date 1732769246046)
@@ -30,7 +30,6 @@
 import javafx.scene.layout.AnchorPane;
 
 
-//import javax.mail.Store; TODO DESCOMENTAR ESTO
 import java.awt.*;
 import java.io.IOException;
 import java.util.*;
@@ -624,9 +623,12 @@
 
     @FXML
     protected void onBtnCClick(){
-        System.out.println(cliente.getTurnoActual() + " " + cliente.getIdCliente());
         if(cliente.getTurnoActual() != cliente.getIdCliente()) {
-            System.out.println("NO VAS A ATACAR ");
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "No es tu turno").showAndWait());
+            return;
+        }
+        if(!cliente.isJugando()){
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "Ya perdiste, no puedes jugar").showAndWait());
             return;
         }
 
@@ -649,6 +651,15 @@
 
     @FXML
     protected void onBtnCMClick(){
+        if(cliente.getTurnoActual() != cliente.getIdCliente()) {
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "No es tu turno").showAndWait());
+            return;
+        }
+        if(!cliente.isJugando()){
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "Ya perdiste, no puedes jugar").showAndWait());
+            return;
+        }
+
         String nombreEnemigo = cbxVerEnemy.getValue();
         if(nombreEnemigo==null){return;}
         if(cliente.getCanonMult() <= 0){return;}
@@ -667,6 +678,15 @@
 
     @FXML
     protected void onBtnBombClick(){
+        if(cliente.getTurnoActual() != cliente.getIdCliente()) {
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "No es tu turno").showAndWait());
+            return;
+        }
+        if(!cliente.isJugando()){
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "Ya perdiste, no puedes jugar").showAndWait());
+            return;
+        }
+
         String nombreEnemigo = cbxVerEnemy.getValue();
         if(nombreEnemigo==null){return;}
         if(cliente.getBomba() <= 0){return;}
@@ -687,6 +707,15 @@
 
     @FXML
     protected void onBtnCBRClick(){
+        if(cliente.getTurnoActual() != cliente.getIdCliente()) {
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "No es tu turno").showAndWait());
+            return;
+        }
+        if(!cliente.isJugando()){
+            Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, "Ya perdiste, no puedes jugar").showAndWait());
+            return;
+        }
+
         String nombreEnemigo = cbxVerEnemy.getValue();
         if(nombreEnemigo==null){return;}
         if(cliente.getCanonBR() <= 0){return;}
Index: src/main/java/Cliente/Cliente.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Cliente;\r\n\r\nimport Modelos.CasesEnCliente;\r\nimport Modelos.CasesEnThreadServidor;\r\nimport Modelos.TiposAtaque;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.ButtonType;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic class Cliente {\r\n    private ClienteScreenController pantallaCliente;\r\n    private MainGameController pantallaMain;\r\n    private DataInputStream entradaDatos;\r\n    private DataOutputStream salidaDatos;\r\n    private ObjectInputStream entradaObjetos;\r\n    private ObjectOutputStream salidaObjetos;\r\n    private Socket socket; //Socket del cliente.\r\n    private String nombreCliente;\r\n    private int idCliente;\r\n    private boolean canStart = false;\r\n    private ArrayList<String> nombresOponentes;\r\n    // Aqui voy a tener una lista de items que van a estar en pantalla\r\n    private List<String> listaItems = new ArrayList<String>();\r\n    private int acero;\r\n    private int dinero;\r\n    private int canon;\r\n    private int canonMult;\r\n    private int bomba;\r\n    private int canonBR;\r\n    private int turnoActual;\r\n    private boolean jugando;\r\n\r\n\r\n\r\n\r\n    public Cliente(ClienteScreenController pantallaCliente) {\r\n        this.pantallaCliente = pantallaCliente;\r\n        dinero = 1000000;\r\n        acero = 1000000; //tesitng values\r\n        canon = 0;\r\n        canonMult = 0;\r\n        bomba = 0;\r\n        canonBR = 0;\r\n        jugando = true;\r\n        turnoActual = 1;\r\n    }\r\n\r\n    public List<String> getListaItems() {\r\n        return listaItems;\r\n    }\r\n\r\n    public void run() {\r\n        listaItems.add(\"Tienda\");\r\n        listaItems.add(\"Energia\");\r\n        listaItems.add(\"Tornado\");\r\n        listaItems.add(\"Tornado\");\r\n        try {\r\n            conectar();\r\n            idCliente = entradaDatos.readInt();\r\n        } catch (Exception ex) {System.out.println(\"Error conectando al servidor\");}\r\n\r\n        try {\r\n            esperarStart();\r\n        } catch (Exception ex) {System.out.println(\"Error esperando a start\");}\r\n        System.out.println(idCliente + \" \" + nombreCliente);\r\n        System.out.println(\"ya todos presionaron listo\");\r\n\r\n        try{\r\n            conseguirNombresOponentes();\r\n        } catch (Exception ex) {System.out.println(\"Error consiguiendo nombre de oponentes\");}\r\n\r\n        new Thread(() -> {\r\n            juegoEmpieza();\r\n        }).start();\r\n    }\r\n\r\n    public void conectar() throws Exception {\r\n        socket = new Socket(\"localhost\", 50000);\r\n        entradaDatos = new DataInputStream(socket.getInputStream());\r\n        salidaDatos = new DataOutputStream(socket.getOutputStream());\r\n        salidaObjetos = new ObjectOutputStream(socket.getOutputStream());\r\n        entradaObjetos = new ObjectInputStream(socket.getInputStream());\r\n    }\r\n\r\n    public boolean mandarNombreAServer(String nombre) {\r\n        if(nombre.trim().equals(\"\")){\r\n            return false;\r\n        }\r\n        try {\r\n            this.nombreCliente = nombre;\r\n            salidaDatos.writeUTF(nombre);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error mandando el nombre\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void mandarIniciarAServer() {\r\n        try {\r\n            salidaDatos.writeBoolean(true);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error mandando que se presion√≥ el bot√≥n iniciar\");\r\n        }\r\n    }\r\n\r\n    // Algunas cosas que tienen que llegar del cliente van a venir por aqui:\r\n    private void esperarStart() {\r\n            try {\r\n                String mensaje = entradaDatos.readUTF();\r\n                System.out.println(mensaje);\r\n                if (mensaje.equals(\"START\")) {\r\n\r\n                    // aqui tengo que decirle a la aplicacion que tiene que moverse al siguiente stage\r\n                    canStart = true;\r\n                    System.out.println(\"test pantalla\");\r\n                    pantallaCliente.moveMain();\r\n                }\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Error recibiendo mensaje del servidor\");\r\n                ex.printStackTrace();\r\n            }\r\n    }\r\n\r\n    private void conseguirNombresOponentes() throws Exception {\r\n        salidaObjetos.writeObject(CasesEnThreadServidor.DEVOLVERNOMBRESOPONENTES);\r\n        nombresOponentes = (ArrayList<String>)entradaObjetos.readObject();\r\n    }\r\n\r\n    private void juegoEmpieza() {\r\n        CasesEnCliente evento = CasesEnCliente.NADA;\r\n        while (true) {\r\n            try {\r\n                evento = (CasesEnCliente) entradaObjetos.readObject();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Error con entrada de evento en threadCliente\");\r\n            }\r\n            switch (evento) {\r\n                case SIGUIENTETURNO:\r\n                    try {\r\n                        turnoActual = entradaDatos.readInt();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso SIGUIENTETURNO\");}\r\n                case RECIBIRMENSAJE:\r\n                    try {\r\n                        recibirMensaje();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirMensaje en Cliente\");}\r\n                case PONERENBITACORA:\r\n                    try {\r\n                        ponerEnBitacora();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ponerEnBitacora en Cliente\");}\r\n                case RECIBIROFERTA:\r\n                    try {\r\n                        recibirOferta();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirOferta en Cliente\");}\r\n                case OFERTAACEPTADA:\r\n                    try {\r\n                        ofertaAceptada();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ofertaAceptada en Cliente\");}\r\n                case DEVOLVERGRAFO:\r\n                    try {\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(pantallaMain.getMapaDelMar().serializar());\r\n                        //TODO, revisar que si sea eso\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso devolverGrafo en Cliente\" + ex);}\r\n                case SETGRAFOENEMIGO:\r\n                    try {\r\n                        setGrafoEnemigo();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso setGrafoEnemigo en Cliente\");}\r\n                case RECIBIROFERTAACERO:\r\n                    try {\r\n                        recibirOfertaAcero();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirOfertaAcero en Cliente\");}\r\n                case OFERTAACEPTADAACERO:\r\n                    try {\r\n                        ofertaAceptadaAcero();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ofertaAceptadaAcero en Cliente\");}\r\n                case SERATACADO:\r\n                    try {\r\n                        serAtacado();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso serAtacado en Cliente\");}\r\n                case CONSEGUIRFUENTE:\r\n                    try {\r\n                        listaItems.add(\"Energia\");\r\n                        pantallaMain.loadDataComboBox();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso serAtacado en Cliente\");}\r\n                case ALGUIENGANO:\r\n                    try {\r\n                        alguienGano();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso alguienGano en Cliente\");}\r\n                case YOGANE:\r\n                    try {\r\n                        yoGane();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso yoGane en Cliente\");}\r\n            }\r\n        }\r\n    }\r\n\r\n    public void mandarMensaje(String mensaje){\r\n        try {\r\n            salidaObjetos.writeObject(CasesEnThreadServidor.MANDARMENSAJE);\r\n            salidaDatos.writeUTF(mensaje);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private void recibirMensaje() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        pantallaMain.getTxaChat().appendText(mensaje + \"\\n\");\r\n    }\r\n\r\n    private void ponerEnBitacora() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        pantallaMain.getTxaAcciones().appendText(mensaje + \"\\n\");\r\n    }\r\n\r\n    private void recibirOferta() throws Exception{\r\n        String jugadorProponiendo = entradaDatos.readUTF();\r\n        String itemPropuesto = entradaDatos.readUTF();\r\n        int precio = entradaDatos.readInt();\r\n        System.out.println(\"llega aqui\");\r\n\r\n//        ButtonType yesButton = new ButtonType(\"S√≠\");\r\n//        ButtonType noButton = new ButtonType(\"No\");\r\n//        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, jugadorProponiendo + \" te propone \" + itemPropuesto + \" por el precio de \" + precio + \". Aceptas?\", yesButton, noButton);\r\n//        alert.setTitle(\"Confirmaci√≥n\");\r\n//        alert.getButtonTypes().setAll(yesButton, noButton);\r\n//        Optional<ButtonType> result = alert.showAndWait();\r\n//\r\n//        if (result.isPresent() && result.get() == yesButton) {\r\n//            System.out.println(\"lo quiso\");\r\n//            if(tengoDineroSuficiente(precio)){\r\n//                salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n//                salidaObjetos.writeObject(true);\r\n//                bajarDinero(precio);\r\n//                listaItems.add(itemPropuesto);\r\n//                System.out.println(nombreCliente + \" \" +  dinero);\r\n//            } else{\r\n//                salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n//                salidaObjetos.writeObject(false);\r\n//            }\r\n//        } else {\r\n//            System.out.println(\"no lo quiso\");\r\n//            salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n//            salidaObjetos.writeObject(false);\r\n//        }\r\n\r\n\r\n\r\n        Platform.runLater(() -> {\r\n            try {\r\n                ButtonType yesButton = new ButtonType(\"S√≠\");\r\n                ButtonType noButton = new ButtonType(\"No\");\r\n\r\n                Alert alert = new Alert(Alert.AlertType.CONFIRMATION, jugadorProponiendo + \" te propone \" + itemPropuesto + \" por el precio de \" + precio + \". ¬øAceptas?\", yesButton, noButton);\r\n                alert.setTitle(\"Confirmaci√≥n\");\r\n\r\n                Optional<ButtonType> result = alert.showAndWait();\r\n\r\n                if (result.isPresent() && result.get() == yesButton) {\r\n                    System.out.println(\"lo quiso\");\r\n                    if(tengoDineroSuficiente(precio)){\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(true);\r\n                        bajarDinero(precio);\r\n                        listaItems.add(itemPropuesto);\r\n                        System.out.println(nombreCliente + \" \" +  dinero);\r\n                        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n                    } else{\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(false);\r\n                    }\r\n                } else {\r\n                    System.out.println(\"no lo quiso\");\r\n                    salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                    salidaObjetos.writeObject(false);\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void ofertaAceptada() throws Exception{\r\n        String item = entradaDatos.readUTF();\r\n        listaItems.remove(item);\r\n        subirDinero(entradaDatos.readInt());\r\n        System.out.println(nombreCliente + \" \" +  dinero);\r\n        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n    }\r\n\r\n    private void setGrafoEnemigo() throws Exception{\r\n        String grafoEnemigo = entradaDatos.readUTF();\r\n        Platform.runLater(() -> pantallaMain.recibeGrafoEnemigo(grafoEnemigo));\r\n    }\r\n\r\n    private void recibirOfertaAcero() throws Exception{\r\n        String jugadorProponiendo = entradaDatos.readUTF();\r\n        int cantidadPropuesta = entradaDatos.readInt();\r\n        int precio = entradaDatos.readInt();\r\n\r\n        Platform.runLater(() -> {\r\n            try {\r\n                ButtonType yesButton = new ButtonType(\"S√≠\");\r\n                ButtonType noButton = new ButtonType(\"No\");\r\n\r\n                Alert alert = new Alert(Alert.AlertType.CONFIRMATION, jugadorProponiendo + \" te propone \" + cantidadPropuesta + \" de acero por el precio de \" + precio + \". ¬øAceptas?\", yesButton, noButton);\r\n                alert.setTitle(\"Confirmaci√≥n\");\r\n\r\n                Optional<ButtonType> result = alert.showAndWait();\r\n\r\n                if (result.isPresent() && result.get() == yesButton) {\r\n                    System.out.println(\"lo quiso\");\r\n                    if(tengoDineroSuficiente(precio)){\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(true);\r\n                        bajarDinero(precio);\r\n                        subirAcero(cantidadPropuesta);\r\n                        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n                    } else{\r\n                        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                        salidaObjetos.writeObject(false);\r\n                    }\r\n                } else {\r\n                    System.out.println(\"no lo quiso\");\r\n                    salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n                    salidaObjetos.writeObject(false);\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void ofertaAceptadaAcero() throws Exception{\r\n        int cant = entradaDatos.readInt();\r\n        bajarAcero(cant);\r\n        subirDinero(entradaDatos.readInt());\r\n        pantallaMain.updateGUIDespuesDeOfertaOCompra();\r\n    }\r\n\r\n    private void serAtacado() throws Exception{\r\n        int[] coords = (int[])entradaObjetos.readObject();\r\n        // Estas son las coordenadas en las que me atacan\r\n        // Aqui es donde tengo que hacer cositas lindas\r\n        TiposAtaque tipoAtaqueRetornar = pantallaMain.atacarIsla(coords[0],coords[1]); // Aqui es en donde llego yo y le mando el ataque a mi compa\r\n        if(false){ //TODO: CAMBIAR EL FALSE POR CONDICIONAL QUE REVISE SI YA PERD√ç\r\n            jugando = false;\r\n            salidaObjetos.writeObject(CasesEnThreadServidor.PERDER);\r\n        }\r\n        salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);\r\n        salidaObjetos.writeObject(tipoAtaqueRetornar);\r\n    }\r\n    private void alguienGano() throws Exception{\r\n        int gano = entradaDatos.readInt();\r\n        Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, \"Gan√≥ el jugador \" + gano).showAndWait());\r\n    }\r\n    private void yoGane() throws Exception{\r\n        Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, \"¬°Tu ganaste!\").showAndWait());\r\n    }\r\n    public boolean tengoDineroSuficiente(int precio){\r\n        return dinero - precio >= 0; //si la resta da m√°s o igual que 0, puede comprar.\r\n    }\r\n\r\n    public void bajarDinero(int precio){\r\n        dinero -= precio;\r\n    }\r\n\r\n    public void subirDinero(int precio){\r\n        dinero += precio;\r\n    }\r\n\r\n    public boolean tengoAceroSuficiente(int cantidad){\r\n        return acero - cantidad >= 0; //si la resta da m√°s o igual que 0, puede comprar.\r\n    }\r\n\r\n    public void bajarAcero(int cantidad){\r\n        acero -= cantidad;\r\n    }\r\n\r\n    public void subirAcero(int cantidad){\r\n        acero += cantidad;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public String getNombreCliente() {\r\n        return nombreCliente;\r\n    }\r\n\r\n    public boolean getCanStart() {\r\n        return canStart;\r\n    }\r\n\r\n    public void setGameController(MainGameController pantallaMain) {\r\n        this.pantallaMain = pantallaMain;\r\n    }\r\n\r\n    public ArrayList<String> getNombresOponentes() {\r\n        return nombresOponentes;\r\n    }\r\n\r\n    public int getDinero() {\r\n        return dinero;\r\n    }\r\n\r\n    public DataInputStream getEntradaDatos() {\r\n        return entradaDatos;\r\n    }\r\n\r\n    public DataOutputStream getSalidaDatos() {\r\n        return salidaDatos;\r\n    }\r\n\r\n    public ObjectInputStream getEntradaObjetos() {\r\n        return entradaObjetos;\r\n    }\r\n\r\n    public ObjectOutputStream getSalidaObjetos() {\r\n        return salidaObjetos;\r\n    }\r\n\r\n    public int getAcero() {\r\n        return acero;\r\n    }\r\n\r\n    public void comprarCanon(){\r\n        canon++;\r\n    }\r\n\r\n    public void usarCanon(){\r\n        canon--;\r\n    }\r\n\r\n    public void comprarCanonMult() {\r\n        canonMult++;\r\n    }\r\n\r\n    public void usarCanonMult() {\r\n        canonMult--;\r\n    }\r\n\r\n    public void comprarBomba() {\r\n        bomba++;\r\n    }\r\n\r\n    public void usarBomba() {\r\n        bomba--;\r\n    }\r\n\r\n    public void comprarCanonBR() {\r\n        canonBR++;\r\n    }\r\n\r\n    public void usarCanonBR() {\r\n        canonBR--;\r\n    }\r\n\r\n    public int getCanon(){\r\n        return canon;\r\n    }\r\n\r\n    public int getCanonMult() {\r\n        return canonMult;\r\n    }\r\n\r\n    public int getBomba() {\r\n        return bomba;\r\n    }\r\n\r\n    public int getCanonBR() {\r\n        return canonBR;\r\n    }\r\n\r\n    public int getIdCliente() {\r\n        return idCliente;\r\n    }\r\n\r\n    public int getTurnoActual() {\r\n        return turnoActual;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Cliente/Cliente.java b/src/main/java/Cliente/Cliente.java
--- a/src/main/java/Cliente/Cliente.java	(revision 893e5798199b4320bfb815e29979c7b8b07f9bf4)
+++ b/src/main/java/Cliente/Cliente.java	(date 1732769246044)
@@ -177,7 +177,6 @@
                     try {
                         salidaObjetos.writeObject(CasesEnThreadServidor.PONERENOBJETO);
                         salidaObjetos.writeObject(pantallaMain.getMapaDelMar().serializar());
-                        //TODO, revisar que si sea eso
                         break;
                     } catch (Exception ex) {System.out.println("Error con caso devolverGrafo en Cliente" + ex);}
                 case SETGRAFOENEMIGO:
@@ -510,4 +509,8 @@
     public int getTurnoActual() {
         return turnoActual;
     }
+
+    public boolean isJugando() {
+        return jugando;
+    }
 }
Index: src/main/java/Server/ThreadServidor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport Modelos.CasesEnCliente;\r\nimport Modelos.CasesEnThreadServidor;\r\nimport Modelos.Random;\r\nimport Modelos.TiposAtaque;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\n\r\npublic class ThreadServidor extends Thread{\r\n    public Socket socket;\r\n    private Server servidor;\r\n    private DataInputStream entradaDatos;\r\n    private DataOutputStream salidaDatos;\r\n    private ObjectInputStream entradaObjetos;\r\n    private ObjectOutputStream salidaObjetos;\r\n    private String nombreCliente;\r\n    private int numeroCliente; //numConexion\r\n    private boolean startPresionado;\r\n    private ArrayList<ThreadServidor> contrincantes;\r\n    private Object objeto;\r\n\r\n    ThreadServidor(Socket socket, Server servidor, int numeroCliente){\r\n        this.socket = socket;\r\n        this.servidor = servidor;\r\n        this.numeroCliente = numeroCliente;\r\n        this.nombreCliente = \"\";\r\n        this.startPresionado = false;\r\n        try {\r\n            entradaDatos = new DataInputStream(socket.getInputStream());\r\n            salidaDatos = new DataOutputStream(socket.getOutputStream());\r\n            salidaObjetos = new ObjectOutputStream(socket.getOutputStream());\r\n            entradaObjetos = new ObjectInputStream(socket.getInputStream());\r\n        } catch (IOException ex) { System.out.println(\"Error en entrada/salida de datos\");}\r\n        this.contrincantes = new ArrayList<ThreadServidor>();\r\n    }\r\n\r\n    public void run(){\r\n        mandarIdCliente();\r\n        recibirNombreCliente();\r\n        recibirSiYaInicio();\r\n        juegoEmpieza();\r\n    }\r\n\r\n    private void mandarIdCliente(){\r\n        try{\r\n            salidaDatos.writeInt(numeroCliente);\r\n        } catch (IOException ex) {System.out.println(\"Error mandando id del cliente\");}\r\n    }\r\n\r\n    private void recibirNombreCliente(){\r\n        try {\r\n            nombreCliente = entradaDatos.readUTF();\r\n            servidor.writeInConsole(\"El jugador \" + numeroCliente + \" se llama \"+ nombreCliente + \"\\n\"); //Lo muestra en el servidor.\r\n        } catch (IOException ex) {System.out.println(\"Error leyendo el nombre del cliente\");}\r\n    }\r\n\r\n    private void recibirSiYaInicio(){\r\n        try {\r\n            startPresionado = entradaDatos.readBoolean();\r\n            servidor.writeInConsole(nombreCliente + \" ya est√° listo\" + \"\\n\"); //Lo muestra en el servidor.\r\n        } catch (IOException ex) {System.out.println(\"Error leyendo si ya presiono el bot√≥n\");}\r\n    }\r\n\r\n    public void mensajeComenzar(String mensaje) {\r\n        try {\r\n            salidaDatos.writeUTF(mensaje);\r\n            salidaDatos.flush(); // Asegura que el mensaje se env√≠e de inmediato\r\n        } catch (IOException ex) {\r\n            System.out.println(\"Error enviando mensaje al cliente \" + nombreCliente);\r\n        }\r\n    }\r\n\r\n    private void juegoEmpieza(){\r\n        CasesEnThreadServidor evento = CasesEnThreadServidor.NADA;\r\n        while(true){\r\n            try {\r\n                evento = (CasesEnThreadServidor) entradaObjetos.readObject();\r\n            } catch (Exception ex) {System.out.println(\"Error con entrada de evento en ThreadServidor\");}\r\n            switch(evento){\r\n                case MANDARMENSAJE:\r\n                    try {\r\n                        mandarMensaje();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirMensaje en ThreadServidor\");}\r\n                case MANDARACCION:\r\n                    try {\r\n                        mandarAccion();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso recibirAccion en ThreadServidor\");}\r\n                case DEVOLVERNOMBRESOPONENTES:\r\n                    try {\r\n                        devolverNombresOponentes();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso devolverNombresOponentes en ThreadServidor\");}\r\n                case PROPONERVENTA:\r\n                    try {\r\n                        proponerVenta();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso proponerVenta en ThreadServidor\");}\r\n                case PONERENOBJETO:\r\n                    try {\r\n                        objeto = entradaObjetos.readObject();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso PONERENOBJETO en ThreadServidor\");}\r\n                case CONSEGUIRGRAFOENEMIGO:\r\n                    try {\r\n                        conseguirGrafoEnemigo();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso CONSEGUIRGRAFOENEMIGO en ThreadServidor\");}\r\n                case PROPONERVENTAACERO:\r\n                    try {\r\n                        proponerVentaAcero();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso PROPONERVENTAACERO en ThreadServidor\");}\r\n                case ATACARCANON:\r\n                    try {\r\n                        atacarCanon();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARCANON en ThreadServidor\");}\r\n                case ATACARCANONMULT:\r\n                    try {\r\n                        atacarCanonMult();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARCANONMULT en ThreadServidor\");}\r\n                case ATACARBOMBA:\r\n                    try {\r\n                        atacarBomba();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARBOMBA en ThreadServidor\");}\r\n                case ATACARCBR:\r\n                    try {\r\n                        atacarCanonBR();\r\n                        break;\r\n                    } catch (Exception ex) {System.out.println(\"Error con caso ATACARCBR en ThreadServidor\");}\r\n                case PERDER:\r\n                    servidor.seRendioId(numeroCliente);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void mandarMensaje() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        salidaObjetos.writeObject(CasesEnCliente.RECIBIRMENSAJE);\r\n        salidaDatos.writeUTF(mensaje);\r\n        for(ThreadServidor contrincante : contrincantes){\r\n            contrincante.salidaObjetos.writeObject((CasesEnCliente.RECIBIRMENSAJE));\r\n            contrincante.salidaDatos.writeUTF(mensaje);\r\n        }\r\n    }\r\n\r\n    private void mandarAccion() throws Exception{\r\n        String mensaje = entradaDatos.readUTF();\r\n        salidaObjetos.writeObject(CasesEnCliente.RECIBIRACCION);\r\n        salidaDatos.writeUTF(mensaje);\r\n        for(ThreadServidor contrincante : contrincantes){\r\n            contrincante.salidaObjetos.writeObject((CasesEnCliente.RECIBIRACCION));\r\n            contrincante.salidaDatos.writeUTF(mensaje);\r\n        }\r\n    }\r\n\r\n    private void devolverNombresOponentes() throws Exception{\r\n        ArrayList<String> nombres = new ArrayList<String>();\r\n        for(ThreadServidor contrincante : contrincantes){\r\n            nombres.add(contrincante.getNombreCliente());\r\n        }\r\n        salidaObjetos.writeObject(nombres);\r\n    }\r\n\r\n    private void proponerVenta() throws Exception{\r\n        String selectedItem = entradaDatos.readUTF();\r\n        String selectedPlayer = entradaDatos.readUTF();\r\n        int precio = entradaDatos.readInt();\r\n        ThreadServidor ts = getEnemigoConNombre(selectedPlayer);\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.RECIBIROFERTA);\r\n        ts.getSalidaDatos().writeUTF(nombreCliente);\r\n        ts.getSalidaDatos().writeUTF(selectedItem);\r\n        ts.getSalidaDatos().writeInt(precio);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        Boolean acepto = (Boolean)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n\r\n        if(acepto){\r\n            salidaObjetos.writeObject(CasesEnCliente.OFERTAACEPTADA);\r\n            salidaDatos.writeUTF(selectedItem);\r\n            salidaDatos.writeInt(precio);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void conseguirGrafoEnemigo() throws Exception{\r\n        String selectedPlayer = entradaDatos.readUTF();\r\n        ThreadServidor ts = getEnemigoConNombre(selectedPlayer);\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.DEVOLVERGRAFO);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        String grafoEnemigo = (String)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n        salidaObjetos.writeObject(CasesEnCliente.SETGRAFOENEMIGO);\r\n        salidaDatos.writeUTF(grafoEnemigo);\r\n    }\r\n\r\n    private void proponerVentaAcero() throws Exception{\r\n        String selectedPlayer = entradaDatos.readUTF();\r\n        int precio = entradaDatos.readInt();\r\n        int cant = entradaDatos.readInt();\r\n        ThreadServidor ts = getEnemigoConNombre(selectedPlayer);\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.RECIBIROFERTAACERO);\r\n        ts.getSalidaDatos().writeUTF(nombreCliente);\r\n        ts.getSalidaDatos().writeInt(precio);\r\n        ts.getSalidaDatos().writeInt(cant);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        Boolean acepto = (Boolean)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n\r\n        if(acepto){\r\n            salidaObjetos.writeObject(CasesEnCliente.OFERTAACEPTADAACERO);\r\n            salidaDatos.writeInt(cant);\r\n            salidaDatos.writeInt(precio);\r\n        }\r\n    }\r\n\r\n    private void atacarCanon() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[] coords = (int[])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n        salidaDatos.writeUTF(\"Ca√±√≥n: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n        ts.getSalidaDatos().writeUTF(\"Te dispar√≥ un Ca√±√≥n en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n        ts.getSalidaObjetos().writeObject(coords);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        TiposAtaque tipoAtaque = (TiposAtaque)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n        switch(tipoAtaque){\r\n            case FUENTEDEENERGIA:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a.\");\r\n                salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                break;\r\n            case REMOLINO:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                int[][] coordsRemolino = {{Random.randomInt(0,19),Random.randomInt(0,19)}, {Random.randomInt(0,19),Random.randomInt(0,19)},{Random.randomInt(0,19),Random.randomInt(0,19)}};\r\n                for (int[] cds : coordsRemolino) {\r\n                    salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                    salidaObjetos.writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case HIT:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, bien hecho!\");\r\n                break;\r\n            case MISS:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void atacarCanonMult() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[] coords = (int[])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n        salidaDatos.writeUTF(\"Ca√±√≥n Multiple: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n        ts.getSalidaDatos().writeUTF(\"Te dispar√≥ un Ca√±√≥n multiple en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n        ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n        ts.getSalidaObjetos().writeObject(coords);\r\n        while(ts.getObjeto() == null){\r\n            sleep(500);\r\n        }\r\n        TiposAtaque tipoAtaque = (TiposAtaque)ts.getObjeto();\r\n        ts.setObjeto(null);\r\n        switch(tipoAtaque){\r\n            case FUENTEDEENERGIA:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a. Adem√°s, por el tipo de ataque, se disparar√°n 4 tiros m√°s al azar.\");\r\n                salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El ataque de ca√±√≥n multiple enemigo acert√≥, disparar√° 4 tiros m√°s\");\r\n                for (int i = 0; i < 4; i++) {\r\n                    int[] cds = {Random.randomInt(0,19),Random.randomInt(0,19)};\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n                    ts.getSalidaObjetos().writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case REMOLINO:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                int[][] coordsRemolino = {{Random.randomInt(0,19),Random.randomInt(0,19)}, {Random.randomInt(0,19),Random.randomInt(0,19)},{Random.randomInt(0,19),Random.randomInt(0,19)}};\r\n                for (int[] cds : coordsRemolino) {\r\n                    salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                    salidaObjetos.writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case HIT:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, por el tipo de ataque, se disparar√°n 4 tiros m√°s al azar.\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"El ataque de ca√±√≥n multiple enemigo acert√≥, disparar√° 4 tiros m√°s\");\r\n                for (int i = 0; i < 4; i++) {\r\n                    int[] cds = {Random.randomInt(0,19),Random.randomInt(0,19)};\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n                    ts.getSalidaObjetos().writeObject(cds);\r\n                    while(ts.getObjeto() == null){\r\n                        sleep(500);\r\n                    }\r\n                    ts.setObjeto(null);\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"Una bala del Ca√±√≥n m√∫ltiple cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                }\r\n                break;\r\n            case MISS:\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                break;\r\n        }\r\n        if(servidor.revisarGane()){\r\n            for (ThreadServidor contrincante : contrincantes) {\r\n                contrincante.getSalidaObjetos().writeObject(CasesEnCliente.ALGUIENGANO);\r\n                contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());\r\n            }\r\n            salidaObjetos.writeObject(CasesEnCliente.YOGANE);\r\n            return;\r\n        }\r\n        //TODO: PONER ESTO DE ABAJO EN CADA ATAQUE, POR AHORA SOLO EST√Å AQUI PARA TESTING\r\n        servidor.siguienteTurno();\r\n        salidaObjetos.writeObject(CasesEnCliente.SIGUIENTETURNO);\r\n        salidaDatos.writeInt(servidor.getTurnoActual());\r\n        for (ThreadServidor contrincante : contrincantes) {\r\n            contrincante.getSalidaObjetos().writeObject(CasesEnCliente.SIGUIENTETURNO);\r\n            contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());\r\n        }\r\n    }\r\n\r\n    private void atacarBomba() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[][] fullCoords = (int[][])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        for (int[] coords : fullCoords) {\r\n            for (int i = 0; i < 2; i++) {\r\n                if(i ==1){\r\n                    coords[Random.randomInt(0,1)]++;\r\n                }\r\n                salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                salidaDatos.writeUTF(\"Bomba: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                ts.getSalidaDatos().writeUTF(\"Te dispar√≥ una bomba en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n                ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n                ts.getSalidaObjetos().writeObject(coords);\r\n                while(ts.getObjeto() == null){\r\n                    sleep(500);\r\n                }\r\n                TiposAtaque tipoAtaque = (TiposAtaque)ts.getObjeto();\r\n                ts.setObjeto(null);\r\n                switch(tipoAtaque){\r\n                    case FUENTEDEENERGIA:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a.\");\r\n                        salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                        break;\r\n                    case REMOLINO:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                        int[][] coordsRemolino = {{Random.randomInt(0,19),Random.randomInt(0,19)}, {Random.randomInt(0,19),Random.randomInt(0,19)},{Random.randomInt(0,19),Random.randomInt(0,19)}};\r\n                        for (int[] cds : coordsRemolino) {\r\n                            salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                            salidaObjetos.writeObject(cds);\r\n                            while(ts.getObjeto() == null){\r\n                                sleep(500);\r\n                            }\r\n                            ts.setObjeto(null);\r\n                            salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                            salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                            ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                            ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                        }\r\n                        break;\r\n                    case HIT:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, bien hecho!\");\r\n                        break;\r\n                    case MISS:\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void atacarCanonBR() throws Exception{\r\n        String nombreEnemigo = entradaDatos.readUTF();\r\n        int[][] fullCoords = (int[][])entradaObjetos.readObject();\r\n        ThreadServidor ts = getEnemigoConNombre(nombreEnemigo);\r\n        //en otros ataques, ponerlo como un for de cada coords\r\n        for (int[] coords : fullCoords) {\r\n            salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n            salidaDatos.writeUTF(\"Ca√±√≥n de Barba Roja: Disparaste a\" + nombreEnemigo + \"en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n            ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n            ts.getSalidaDatos().writeUTF(\"Te dispar√≥ un Ca√±√≥n de Barba Roja en (\" + coords[0] + \",\" + coords[1] + \")\");\r\n            ts.getSalidaObjetos().writeObject(CasesEnCliente.SERATACADO);\r\n            ts.getSalidaObjetos().writeObject(coords);\r\n            while (ts.getObjeto() == null) {\r\n                sleep(500);\r\n            }\r\n            TiposAtaque tipoAtaque = (TiposAtaque) ts.getObjeto();\r\n            ts.setObjeto(null);\r\n            switch (tipoAtaque) {\r\n                case FUENTEDEENERGIA:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque le di√≥ a una fuente de energ√≠a, consigues una fuente de energ√≠a.\");\r\n                    salidaObjetos.writeObject(CasesEnCliente.CONSEGUIRFUENTE);\r\n                    break;\r\n                case REMOLINO:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque cay√≥ en un remolino, se te devolver√°n 3 disparos en lugares random.\");\r\n                    ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    ts.getSalidaDatos().writeUTF(\"El disparo enemigo cay√≥ en tu remolino, se le devolver√°n 3 disparos al enemigo\");\r\n                    int[][] coordsRemolino = {{Random.randomInt(0, 19), Random.randomInt(0, 19)}, {Random.randomInt(0, 19), Random.randomInt(0, 19)}, {Random.randomInt(0, 19), Random.randomInt(0, 19)}};\r\n                    for (int[] cds : coordsRemolino) {\r\n                        salidaObjetos.writeObject(CasesEnCliente.SERATACADO);\r\n                        salidaObjetos.writeObject(cds);\r\n                        while (ts.getObjeto() == null) {\r\n                            sleep(500);\r\n                        }\r\n                        ts.setObjeto(null);\r\n                        salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        salidaDatos.writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                        ts.getSalidaObjetos().writeObject(CasesEnCliente.PONERENBITACORA);\r\n                        ts.getSalidaDatos().writeUTF(\"Una bala del remolino cay√≥ en (\" + cds[0] + \",\" + cds[1] + \")\");\r\n                    }\r\n                    break;\r\n                case HIT:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque le di√≥ a un componente en el campo de tu enemigo, bien hecho!\");\r\n                    break;\r\n                case MISS:\r\n                    salidaObjetos.writeObject(CasesEnCliente.PONERENBITACORA);\r\n                    salidaDatos.writeUTF(\"Tu ataque no le di√≥ a nada...\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //GETTERS Y SETTERS:\r\n\r\n    public boolean isStartPresionado() {\r\n        return startPresionado;\r\n    }\r\n\r\n    public ArrayList<ThreadServidor> getContrincantes() {\r\n        return contrincantes;\r\n    }\r\n\r\n    public String getNombreCliente() {\r\n        return nombreCliente;\r\n    }\r\n\r\n    public ThreadServidor getEnemigoConNombre(String nombre){\r\n        for (ThreadServidor contrincante : contrincantes) {\r\n            if(contrincante.getNombreCliente().equals(nombre)){\r\n                return contrincante;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public DataInputStream getEntradaDatos() {\r\n        return entradaDatos;\r\n    }\r\n\r\n    public DataOutputStream getSalidaDatos() {\r\n        return salidaDatos;\r\n    }\r\n\r\n    public ObjectInputStream getEntradaObjetos() {\r\n        return entradaObjetos;\r\n    }\r\n\r\n    public ObjectOutputStream getSalidaObjetos() {\r\n        return salidaObjetos;\r\n    }\r\n\r\n    public Object getObjeto() {\r\n        return objeto;\r\n    }\r\n\r\n    public void setObjeto(Object objeto) {\r\n        this.objeto = objeto;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Server/ThreadServidor.java b/src/main/java/Server/ThreadServidor.java
--- a/src/main/java/Server/ThreadServidor.java	(revision 893e5798199b4320bfb815e29979c7b8b07f9bf4)
+++ b/src/main/java/Server/ThreadServidor.java	(date 1732769246048)
@@ -278,6 +278,22 @@
                 salidaDatos.writeUTF("Tu ataque no le di√≥ a nada...");
                 break;
         }
+        if(servidor.revisarGane()){
+            for (ThreadServidor contrincante : contrincantes) {
+                contrincante.getSalidaObjetos().writeObject(CasesEnCliente.ALGUIENGANO);
+                contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+            }
+            salidaObjetos.writeObject(CasesEnCliente.YOGANE);
+            return;
+        }
+        servidor.siguienteTurno();
+        salidaObjetos.writeObject(CasesEnCliente.SIGUIENTETURNO);
+        salidaDatos.writeInt(servidor.getTurnoActual());
+        for (ThreadServidor contrincante : contrincantes) {
+            contrincante.getSalidaObjetos().writeObject(CasesEnCliente.SIGUIENTETURNO);
+            contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+        }
+
     }
 
     private void atacarCanonMult() throws Exception{
@@ -368,7 +384,6 @@
             salidaObjetos.writeObject(CasesEnCliente.YOGANE);
             return;
         }
-        //TODO: PONER ESTO DE ABAJO EN CADA ATAQUE, POR AHORA SOLO EST√Å AQUI PARA TESTING
         servidor.siguienteTurno();
         salidaObjetos.writeObject(CasesEnCliente.SIGUIENTETURNO);
         salidaDatos.writeInt(servidor.getTurnoActual());
@@ -435,6 +450,21 @@
                 }
             }
         }
+        if(servidor.revisarGane()){
+            for (ThreadServidor contrincante : contrincantes) {
+                contrincante.getSalidaObjetos().writeObject(CasesEnCliente.ALGUIENGANO);
+                contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+            }
+            salidaObjetos.writeObject(CasesEnCliente.YOGANE);
+            return;
+        }
+        servidor.siguienteTurno();
+        salidaObjetos.writeObject(CasesEnCliente.SIGUIENTETURNO);
+        salidaDatos.writeInt(servidor.getTurnoActual());
+        for (ThreadServidor contrincante : contrincantes) {
+            contrincante.getSalidaObjetos().writeObject(CasesEnCliente.SIGUIENTETURNO);
+            contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+        }
     }
 
     private void atacarCanonBR() throws Exception{
@@ -489,6 +519,21 @@
                     break;
             }
         }
+        if(servidor.revisarGane()){
+            for (ThreadServidor contrincante : contrincantes) {
+                contrincante.getSalidaObjetos().writeObject(CasesEnCliente.ALGUIENGANO);
+                contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+            }
+            salidaObjetos.writeObject(CasesEnCliente.YOGANE);
+            return;
+        }
+        servidor.siguienteTurno();
+        salidaObjetos.writeObject(CasesEnCliente.SIGUIENTETURNO);
+        salidaDatos.writeInt(servidor.getTurnoActual());
+        for (ThreadServidor contrincante : contrincantes) {
+            contrincante.getSalidaObjetos().writeObject(CasesEnCliente.SIGUIENTETURNO);
+            contrincante.getSalidaDatos().writeInt(servidor.getTurnoActual());
+        }
     }
 
 
Index: src/main/java/Cliente/StoreController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Cliente;\r\n\r\nimport Cliente.Grafo.MapaDelMar;\r\nimport Modelos.CasesEnThreadServidor;\r\nimport javafx.application.Platform;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class StoreController {\r\n    private Stage stage;\r\n    private Scene scene;\r\n    private Parent root;\r\n    private Cliente cliente;\r\n    private MapaDelMar mapaDelMar;\r\n    private List<String> listaItems = new ArrayList<String>();\r\n\r\n    @FXML\r\n    private ComboBox<String> cbxComponentes;\r\n\r\n    @FXML\r\n    private ComboBox<String> cbxJugadores;\r\n\r\n    @FXML\r\n    private Spinner<Integer> sbxPrecioComponente;\r\n\r\n    @FXML\r\n    private Label lblDinero;\r\n\r\n    @FXML\r\n    private Label lblAcero;\r\n\r\n    @FXML\r\n    private ComboBox<String> cbxJugadores2;\r\n\r\n    @FXML\r\n    private Spinner<Integer> sbxPrecioAcero;\r\n\r\n    @FXML\r\n    private Spinner<Integer> sbxCantAcero;\r\n\r\n\r\n    public void setGameController(Cliente _cliente, MapaDelMar mapaDelMar){ // De una ves en esta funcion voy a crear el grafo\r\n        // Como esto se corre cuando se inicializa la aplicacion, aqui vamos a poner los items principales de la pantalla\r\n        this.cliente = _cliente;\r\n        this.mapaDelMar = mapaDelMar;\r\n        actualizarComponentesCbx();\r\n        setCbxJugadores();\r\n        setSpinners();\r\n        actualizarDinero();\r\n        actualizarAcero();\r\n    }\r\n\r\n\r\n    public void actualizarComponentesCbx() {\r\n        cbxComponentes.getItems().clear();\r\n        for(int i = 0; i < cliente.getListaItems().size(); i++) {\r\n            cbxComponentes.getItems().add(cliente.getListaItems().get(i));\r\n        }\r\n    }\r\n\r\n    public void actualizarDinero(){\r\n        lblDinero.setText(\"\" + cliente.getDinero());\r\n    }\r\n\r\n    public void actualizarAcero(){\r\n        lblAcero.setText(\"\" + cliente.getAcero());\r\n    }\r\n\r\n    private void setCbxJugadores(){\r\n        for (String nombreOponente : cliente.getNombresOponentes()) {\r\n            cbxJugadores.getItems().add(nombreOponente);\r\n            cbxJugadores2.getItems().add(nombreOponente);\r\n        }\r\n\r\n    }\r\n    private void setSpinners(){\r\n        sbxPrecioComponente.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(100, 10000, 100, 100));\r\n        sbxPrecioAcero.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(100, 10000, 100, 100));\r\n        sbxCantAcero.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(50, 10000, 50, 50));\r\n    }\r\n\r\n    //si no hay nada es null\r\n    @FXML\r\n    protected void onBtnPrecioEspecificoClick(){\r\n        String selectedItem = cbxComponentes.getValue();\r\n        if(selectedItem == null){return;}\r\n        cbxComponentes.getItems().remove(selectedItem);\r\n        cliente.getListaItems().remove(selectedItem);\r\n        cliente.subirDinero(getSellingPriceComponente(selectedItem));\r\n        actualizarDinero();\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnPrecioAcordadoClick(){\r\n        String selectedItem = cbxComponentes.getValue();\r\n        String selectedPlayer = cbxJugadores.getValue();\r\n        int precio = sbxPrecioComponente.getValue();\r\n        if(selectedItem == null || selectedPlayer == null){return;}\r\n        try {\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.PROPONERVENTA);\r\n            cliente.getSalidaDatos().writeUTF(selectedItem);\r\n            cliente.getSalidaDatos().writeUTF(selectedPlayer);\r\n            cliente.getSalidaDatos().writeInt(precio);\r\n        } catch (Exception e) {System.out.println(\"Error en tienda proponiendo venta\");}\r\n    }\r\n\r\n    @FXML\r\n    protected void onBtnVenderAceroClick(){\r\n        String selectedPlayer = cbxJugadores2.getValue();\r\n        int precio = sbxPrecioAcero.getValue();\r\n        int cant = sbxCantAcero.getValue();\r\n        if(selectedPlayer == null || cliente.getAcero() < cant){return;}\r\n        try {\r\n            cliente.getSalidaObjetos().writeObject(CasesEnThreadServidor.PROPONERVENTAACERO);\r\n            cliente.getSalidaDatos().writeUTF(selectedPlayer);\r\n            cliente.getSalidaDatos().writeInt(cant);\r\n            cliente.getSalidaDatos().writeInt(precio);\r\n        } catch (Exception e) {System.out.println(\"Error en tienda proponiendo venta\");}\r\n    }\r\n\r\n\r\n    @FXML\r\n    protected void btnAddEnergy(){\r\n        int precio = getPriceComponente(\"Energia\");\r\n        if(cliente.tengoDineroSuficiente(precio)){\r\n            cliente.bajarDinero(precio);\r\n            cliente.getListaItems().add(\"Energia\");\r\n            actualizarDinero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddStore(){\r\n        int precio = getPriceComponente(\"Tienda\");\r\n        if(cliente.tengoDineroSuficiente(precio)){\r\n            cliente.bajarDinero(precio);\r\n            cliente.getListaItems().add(\"Tienda\");\r\n            actualizarDinero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddConector(){\r\n        int precio = getPriceComponente(\"Conector\");\r\n        if(cliente.tengoDineroSuficiente(precio)){\r\n            cliente.bajarDinero(precio);\r\n            cliente.getListaItems().add(\"Conector\");\r\n            actualizarDinero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddTemplo(){\r\n        int precio = getPriceComponente(\"Templo\");\r\n        if(cliente.tengoDineroSuficiente(precio)){\r\n            cliente.bajarDinero(precio);\r\n            cliente.getListaItems().add(\"Templo\");\r\n            actualizarDinero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddMina(){\r\n        int precio = getPriceComponente(\"Mina\");\r\n        if(cliente.tengoDineroSuficiente(precio)){\r\n            cliente.bajarDinero(precio);\r\n            cliente.getListaItems().add(\"Mina\");\r\n            actualizarDinero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddCanon(){\r\n        int precio = 500;\r\n        if(cliente.tengoAceroSuficiente(precio)){\r\n            cliente.bajarAcero(precio);\r\n            cliente.comprarCanon();\r\n            actualizarAcero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddCanonMult(){\r\n        int precio = 1000;\r\n        if(cliente.tengoAceroSuficiente(precio)){\r\n            cliente.bajarAcero(precio);\r\n            cliente.comprarCanonMult();\r\n            actualizarAcero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddBomba(){\r\n        int precio = 2000;\r\n        if(cliente.tengoAceroSuficiente(precio)){\r\n            cliente.bajarAcero(precio);\r\n            cliente.comprarBomba();\r\n            actualizarAcero();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void btnAddCanonBR(){\r\n        int precio = 5000;\r\n        if(cliente.tengoAceroSuficiente(precio)){\r\n            cliente.bajarAcero(precio);\r\n            cliente.comprarCanonBR();\r\n            actualizarAcero();\r\n        }\r\n    }\r\n\r\n    private int getSellingPriceComponente(String item) {\r\n        System.out.println(item);\r\n        int number = switch (item) {\r\n            case \"Energia\" -> 6000;\r\n            case \"Mina\" -> 500;\r\n            case \"Templo\" -> 1500;\r\n            case \"Tienda\" -> 1000;\r\n            case \"Conector\" -> 50;\r\n            default -> {\r\n                System.out.println(\"√çtem no reconocido: \" + item);\r\n                yield -1;\r\n            }\r\n        };\r\n        //TODO: los precios de ahorita son testing\r\n        return number;\r\n    }\r\n\r\n    private int getPriceComponente(String item){\r\n        System.out.println(item);\r\n        int number = switch (item) {\r\n            case \"Energia\" -> 12000;\r\n            case \"Mina\" -> 1000;\r\n            case \"Templo\" -> 3000;\r\n            case \"Tienda\" -> 2000;\r\n            case \"Conector\" -> 100;\r\n            default -> {\r\n                System.out.println(\"√çtem no reconocido: \" + item);\r\n                yield -1;\r\n            }\r\n        };\r\n        //TODO: los precios de ahorita son testing\r\n        return number;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Cliente/StoreController.java b/src/main/java/Cliente/StoreController.java
--- a/src/main/java/Cliente/StoreController.java	(revision 893e5798199b4320bfb815e29979c7b8b07f9bf4)
+++ b/src/main/java/Cliente/StoreController.java	(date 1732769246047)
@@ -182,6 +182,7 @@
 
     @FXML
     protected void btnAddCanon(){
+        if(!tieneArmeria()){return;}
         int precio = 500;
         if(cliente.tengoAceroSuficiente(precio)){
             cliente.bajarAcero(precio);
@@ -192,6 +193,7 @@
 
     @FXML
     protected void btnAddCanonMult(){
+        if(!tieneArmeria()){return;}
         int precio = 1000;
         if(cliente.tengoAceroSuficiente(precio)){
             cliente.bajarAcero(precio);
@@ -202,6 +204,7 @@
 
     @FXML
     protected void btnAddBomba(){
+        if(!tieneArmeria()){return;}
         int precio = 2000;
         if(cliente.tengoAceroSuficiente(precio)){
             cliente.bajarAcero(precio);
@@ -212,6 +215,7 @@
 
     @FXML
     protected void btnAddCanonBR(){
+        if(!tieneArmeria()){return;}
         int precio = 5000;
         if(cliente.tengoAceroSuficiente(precio)){
             cliente.bajarAcero(precio);
@@ -220,6 +224,12 @@
         }
     }
 
+    private boolean tieneArmeria(){
+//        return mapaDelMar.getItemsInScreen().contains("Armeria");
+        //TODO: DESCMENTAR LO DE ARRIBA Y  QUITAR LOD E ABAJO
+        return true;
+    }
+
     private int getSellingPriceComponente(String item) {
         System.out.println(item);
         int number = switch (item) {
@@ -233,7 +243,6 @@
                 yield -1;
             }
         };
-        //TODO: los precios de ahorita son testing
         return number;
     }
 
@@ -250,7 +259,6 @@
                 yield -1;
             }
         };
-        //TODO: los precios de ahorita son testing
         return number;
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4fad49e6-0c16-4e50-a4c6-3768dd8e4274\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Cliente/Cliente.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Cliente/Cliente.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Cliente/Grafo/TipoIsla.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Cliente/Grafo/TipoIsla.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/Conector.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/Images/Conector.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/FuenteEnergia.jpg\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/Tienda.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/Images/Tienda.jpg\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\",\r\n    \"assignee\": \"arty4325\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/arty4325/IC2001-PiratesOfGraphebbean.git\",\r\n    \"accountId\": \"f254b057-4a32-4106-8544-2bb4e5141361\"\r\n  }\r\n}]]></component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2oMnTuthV00683CTUdFtmVzrkIB\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.HelloApplication.executor\": \"Run\",\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"Application.MainCliente.executor\": \"Run\",\r\n    \"Application.MainServidor.executor\": \"Run\",\r\n    \"Application.PrimerUsuario.executor\": \"Run\",\r\n    \"Application.SegundoUsuario.executor\": \"Run\",\r\n    \"Application.TercerUsuario.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/artur/AppData/Local/SceneBuilder/SceneBuilder.exe\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"editing.templates\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Application.PrimerUsuario\">\r\n    <configuration name=\"CuartoUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainServidor\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Server.MainServidor\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"Server.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"PrimerUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SegundoUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"TercerUsuario\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Cliente.MainCliente\" />\r\n      <module name=\"PiratesOfGraphebbean\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.SegundoUsuario\" />\r\n      <item itemvalue=\"Application.PrimerUsuario\" />\r\n      <item itemvalue=\"Application.TercerUsuario\" />\r\n      <item itemvalue=\"Application.CuartoUsuario\" />\r\n      <item itemvalue=\"Application.MainServidor\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.MainServidor\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-fdfe4dae3a2d-intellij.indexing.shared.core-IU-243.21565.193\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-e768b9ed790e-JavaScript-IU-243.21565.193\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4fad49e6-0c16-4e50-a4c6-3768dd8e4274\" name=\"Changes\" comment=\"\" />\r\n      <created>1730688324267</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1730688324267</updated>\r\n      <workItem from=\"1730688325230\" duration=\"64000\" />\r\n      <workItem from=\"1730688412823\" duration=\"479000\" />\r\n      <workItem from=\"1730743911188\" duration=\"573000\" />\r\n      <workItem from=\"1730744498006\" duration=\"94000\" />\r\n      <workItem from=\"1730744611083\" duration=\"3334000\" />\r\n      <workItem from=\"1730750503433\" duration=\"139000\" />\r\n      <workItem from=\"1730831699035\" duration=\"16787000\" />\r\n      <workItem from=\"1730849403728\" duration=\"911000\" />\r\n      <workItem from=\"1730850713113\" duration=\"324000\" />\r\n      <workItem from=\"1730943720171\" duration=\"1583000\" />\r\n      <workItem from=\"1731029507068\" duration=\"318000\" />\r\n      <workItem from=\"1731099917659\" duration=\"31000\" />\r\n      <workItem from=\"1731130225065\" duration=\"413000\" />\r\n      <workItem from=\"1731172770777\" duration=\"10640000\" />\r\n      <workItem from=\"1731363817313\" duration=\"273000\" />\r\n      <workItem from=\"1731364235778\" duration=\"613000\" />\r\n      <workItem from=\"1731542602422\" duration=\"12021000\" />\r\n      <workItem from=\"1731695249751\" duration=\"1725000\" />\r\n      <workItem from=\"1731697033197\" duration=\"1667000\" />\r\n      <workItem from=\"1731706536799\" duration=\"17678000\" />\r\n      <workItem from=\"1731774628430\" duration=\"1839000\" />\r\n      <workItem from=\"1731817733998\" duration=\"7189000\" />\r\n      <workItem from=\"1731899655457\" duration=\"1224000\" />\r\n      <workItem from=\"1731960866531\" duration=\"8712000\" />\r\n      <workItem from=\"1731979516954\" duration=\"20734000\" />\r\n      <workItem from=\"1732047788319\" duration=\"9837000\" />\r\n      <workItem from=\"1732432480378\" duration=\"11761000\" />\r\n      <workItem from=\"1732640435210\" duration=\"19137000\" />\r\n      <workItem from=\"1732739723118\" duration=\"10566000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"OPEN_GENERIC_TABS\">\r\n      <map>\r\n        <entry key=\"2c77b4ff-3111-41b4-9cfc-2df42e090599\" value=\"TOOL_WINDOW\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"2c77b4ff-3111-41b4-9cfc-2df42e090599\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 893e5798199b4320bfb815e29979c7b8b07f9bf4)
+++ b/.idea/workspace.xml	(date 1732769261711)
@@ -7,12 +7,12 @@
     <list default="true" id="4fad49e6-0c16-4e50-a4c6-3768dd8e4274" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/Cliente.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/Cliente.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/Grafo/MapaDelMar.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/Grafo/TipoIsla.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/Grafo/TipoIsla.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/ClienteScreenController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/ClienteScreenController.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Cliente/MainGameController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/Conector.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/Images/Conector.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/FuenteEnergia.jpg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/Tienda.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/Images/Tienda.jpg" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnCliente.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnCliente.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnThreadServidor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Modelos/CasesEnThreadServidor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Server/Server.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Server/Server.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Server/ThreadServidor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Server/ThreadServidor.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -88,7 +88,7 @@
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
-  <component name="RunManager" selected="Application.PrimerUsuario">
+  <component name="RunManager" selected="Application.SegundoUsuario">
     <configuration name="CuartoUsuario" type="Application" factoryName="Application">
       <option name="MAIN_CLASS_NAME" value="Cliente.MainCliente" />
       <module name="PiratesOfGraphebbean" />
@@ -195,18 +195,8 @@
     <option name="version" value="3" />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
-    <option name="OPEN_GENERIC_TABS">
-      <map>
-        <entry key="2c77b4ff-3111-41b4-9cfc-2df42e090599" value="TOOL_WINDOW" />
-      </map>
-    </option>
     <option name="TAB_STATES">
       <map>
-        <entry key="2c77b4ff-3111-41b4-9cfc-2df42e090599">
-          <value>
-            <State />
-          </value>
-        </entry>
         <entry key="MAIN">
           <value>
             <State />
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module org.example.piratesofgraphebbean {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n    requires javafx.graphics;\r\n    requires java.desktop;\r\n//    requires mail; TODO DESCOMENTAR ESTO\r\n\r\n\r\n    opens org.example.piratesofgraphebbean to javafx.fxml;\r\n    opens Server to javafx.fxml;\r\n    opens Cliente to javafx.fxml;\r\n    exports org.example.piratesofgraphebbean;\r\n    exports Server;\r\n    exports Cliente;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision 893e5798199b4320bfb815e29979c7b8b07f9bf4)
+++ b/src/main/java/module-info.java	(date 1732769246049)
@@ -3,7 +3,6 @@
     requires javafx.fxml;
     requires javafx.graphics;
     requires java.desktop;
-//    requires mail; TODO DESCOMENTAR ESTO
 
 
     opens org.example.piratesofgraphebbean to javafx.fxml;
